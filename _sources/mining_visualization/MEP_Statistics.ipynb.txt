{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "provincial-professor",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Analyzing the European Parliament"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "spanish-buying",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import bokeh.models as bmo\n",
    "import bokeh.plotting as bpl\n",
    "from bokeh.palettes import d3\n",
    "\n",
    "import prince\n",
    "\n",
    "from tqdm.auto import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "alive-mechanics",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <div class=\"bk-root\">\n",
       "        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n",
       "        <span id=\"1001\">Loading BokehJS ...</span>\n",
       "    </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "(function(root) {\n",
       "  function now() {\n",
       "    return new Date();\n",
       "  }\n",
       "\n",
       "  var force = true;\n",
       "\n",
       "  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n",
       "    root._bokeh_onload_callbacks = [];\n",
       "    root._bokeh_is_loading = undefined;\n",
       "  }\n",
       "\n",
       "  var JS_MIME_TYPE = 'application/javascript';\n",
       "  var HTML_MIME_TYPE = 'text/html';\n",
       "  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n",
       "  var CLASS_NAME = 'output_bokeh rendered_html';\n",
       "\n",
       "  /**\n",
       "   * Render data to the DOM node\n",
       "   */\n",
       "  function render(props, node) {\n",
       "    var script = document.createElement(\"script\");\n",
       "    node.appendChild(script);\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when an output is cleared or removed\n",
       "   */\n",
       "  function handleClearOutput(event, handle) {\n",
       "    var cell = handle.cell;\n",
       "\n",
       "    var id = cell.output_area._bokeh_element_id;\n",
       "    var server_id = cell.output_area._bokeh_server_id;\n",
       "    // Clean up Bokeh references\n",
       "    if (id != null && id in Bokeh.index) {\n",
       "      Bokeh.index[id].model.document.clear();\n",
       "      delete Bokeh.index[id];\n",
       "    }\n",
       "\n",
       "    if (server_id !== undefined) {\n",
       "      // Clean up Bokeh references\n",
       "      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n",
       "      cell.notebook.kernel.execute(cmd, {\n",
       "        iopub: {\n",
       "          output: function(msg) {\n",
       "            var id = msg.content.text.trim();\n",
       "            if (id in Bokeh.index) {\n",
       "              Bokeh.index[id].model.document.clear();\n",
       "              delete Bokeh.index[id];\n",
       "            }\n",
       "          }\n",
       "        }\n",
       "      });\n",
       "      // Destroy server and session\n",
       "      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n",
       "      cell.notebook.kernel.execute(cmd);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  /**\n",
       "   * Handle when a new output is added\n",
       "   */\n",
       "  function handleAddOutput(event, handle) {\n",
       "    var output_area = handle.output_area;\n",
       "    var output = handle.output;\n",
       "\n",
       "    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n",
       "    if ((output.output_type != \"display_data\") || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {\n",
       "      return\n",
       "    }\n",
       "\n",
       "    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n",
       "\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n",
       "      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n",
       "      // store reference to embed id on output_area\n",
       "      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n",
       "    }\n",
       "    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n",
       "      var bk_div = document.createElement(\"div\");\n",
       "      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n",
       "      var script_attrs = bk_div.children[0].attributes;\n",
       "      for (var i = 0; i < script_attrs.length; i++) {\n",
       "        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n",
       "        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n",
       "      }\n",
       "      // store reference to server id on output_area\n",
       "      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n",
       "    }\n",
       "  }\n",
       "\n",
       "  function register_renderer(events, OutputArea) {\n",
       "\n",
       "    function append_mime(data, metadata, element) {\n",
       "      // create a DOM node to render to\n",
       "      var toinsert = this.create_output_subarea(\n",
       "        metadata,\n",
       "        CLASS_NAME,\n",
       "        EXEC_MIME_TYPE\n",
       "      );\n",
       "      this.keyboard_manager.register_events(toinsert);\n",
       "      // Render to node\n",
       "      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n",
       "      render(props, toinsert[toinsert.length - 1]);\n",
       "      element.append(toinsert);\n",
       "      return toinsert\n",
       "    }\n",
       "\n",
       "    /* Handle when an output is cleared or removed */\n",
       "    events.on('clear_output.CodeCell', handleClearOutput);\n",
       "    events.on('delete.Cell', handleClearOutput);\n",
       "\n",
       "    /* Handle when a new output is added */\n",
       "    events.on('output_added.OutputArea', handleAddOutput);\n",
       "\n",
       "    /**\n",
       "     * Register the mime type and append_mime function with output_area\n",
       "     */\n",
       "    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n",
       "      /* Is output safe? */\n",
       "      safe: true,\n",
       "      /* Index of renderer in `output_area.display_order` */\n",
       "      index: 0\n",
       "    });\n",
       "  }\n",
       "\n",
       "  // register the mime type if in Jupyter Notebook environment and previously unregistered\n",
       "  if (root.Jupyter !== undefined) {\n",
       "    var events = require('base/js/events');\n",
       "    var OutputArea = require('notebook/js/outputarea').OutputArea;\n",
       "\n",
       "    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n",
       "      register_renderer(events, OutputArea);\n",
       "    }\n",
       "  }\n",
       "\n",
       "  \n",
       "  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n",
       "    root._bokeh_timeout = Date.now() + 5000;\n",
       "    root._bokeh_failed_load = false;\n",
       "  }\n",
       "\n",
       "  var NB_LOAD_WARNING = {'data': {'text/html':\n",
       "     \"<div style='background-color: #fdd'>\\n\"+\n",
       "     \"<p>\\n\"+\n",
       "     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n",
       "     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n",
       "     \"</p>\\n\"+\n",
       "     \"<ul>\\n\"+\n",
       "     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n",
       "     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n",
       "     \"</ul>\\n\"+\n",
       "     \"<code>\\n\"+\n",
       "     \"from bokeh.resources import INLINE\\n\"+\n",
       "     \"output_notebook(resources=INLINE)\\n\"+\n",
       "     \"</code>\\n\"+\n",
       "     \"</div>\"}};\n",
       "\n",
       "  function display_loaded() {\n",
       "    var el = document.getElementById(\"1001\");\n",
       "    if (el != null) {\n",
       "      el.textContent = \"BokehJS is loading...\";\n",
       "    }\n",
       "    if (root.Bokeh !== undefined) {\n",
       "      if (el != null) {\n",
       "        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n",
       "      }\n",
       "    } else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(display_loaded, 100)\n",
       "    }\n",
       "  }\n",
       "\n",
       "\n",
       "  function run_callbacks() {\n",
       "    try {\n",
       "      root._bokeh_onload_callbacks.forEach(function(callback) {\n",
       "        if (callback != null)\n",
       "          callback();\n",
       "      });\n",
       "    } finally {\n",
       "      delete root._bokeh_onload_callbacks\n",
       "    }\n",
       "    console.debug(\"Bokeh: all callbacks have finished\");\n",
       "  }\n",
       "\n",
       "  function load_libs(css_urls, js_urls, callback) {\n",
       "    if (css_urls == null) css_urls = [];\n",
       "    if (js_urls == null) js_urls = [];\n",
       "\n",
       "    root._bokeh_onload_callbacks.push(callback);\n",
       "    if (root._bokeh_is_loading > 0) {\n",
       "      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n",
       "      return null;\n",
       "    }\n",
       "    if (js_urls == null || js_urls.length === 0) {\n",
       "      run_callbacks();\n",
       "      return null;\n",
       "    }\n",
       "    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n",
       "    root._bokeh_is_loading = css_urls.length + js_urls.length;\n",
       "\n",
       "    function on_load() {\n",
       "      root._bokeh_is_loading--;\n",
       "      if (root._bokeh_is_loading === 0) {\n",
       "        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n",
       "        run_callbacks()\n",
       "      }\n",
       "    }\n",
       "\n",
       "    function on_error() {\n",
       "      console.error(\"failed to load \" + url);\n",
       "    }\n",
       "\n",
       "    for (var i = 0; i < css_urls.length; i++) {\n",
       "      var url = css_urls[i];\n",
       "      const element = document.createElement(\"link\");\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.rel = \"stylesheet\";\n",
       "      element.type = \"text/css\";\n",
       "      element.href = url;\n",
       "      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n",
       "      document.body.appendChild(element);\n",
       "    }\n",
       "\n",
       "    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n",
       "\n",
       "    for (var i = 0; i < js_urls.length; i++) {\n",
       "      var url = js_urls[i];\n",
       "      var element = document.createElement('script');\n",
       "      element.onload = on_load;\n",
       "      element.onerror = on_error;\n",
       "      element.async = false;\n",
       "      element.src = url;\n",
       "      if (url in hashes) {\n",
       "        element.crossOrigin = \"anonymous\";\n",
       "        element.integrity = \"sha384-\" + hashes[url];\n",
       "      }\n",
       "      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n",
       "      document.head.appendChild(element);\n",
       "    }\n",
       "  };\n",
       "\n",
       "  function inject_raw_css(css) {\n",
       "    const element = document.createElement(\"style\");\n",
       "    element.appendChild(document.createTextNode(css));\n",
       "    document.body.appendChild(element);\n",
       "  }\n",
       "\n",
       "  \n",
       "  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n",
       "  var css_urls = [];\n",
       "  \n",
       "\n",
       "  var inline_js = [\n",
       "    function(Bokeh) {\n",
       "      Bokeh.set_log_level(\"info\");\n",
       "    },\n",
       "    function(Bokeh) {\n",
       "    \n",
       "    \n",
       "    }\n",
       "  ];\n",
       "\n",
       "  function run_inline_js() {\n",
       "    \n",
       "    if (root.Bokeh !== undefined || force === true) {\n",
       "      \n",
       "    for (var i = 0; i < inline_js.length; i++) {\n",
       "      inline_js[i].call(root, root.Bokeh);\n",
       "    }\n",
       "    if (force === true) {\n",
       "        display_loaded();\n",
       "      }} else if (Date.now() < root._bokeh_timeout) {\n",
       "      setTimeout(run_inline_js, 100);\n",
       "    } else if (!root._bokeh_failed_load) {\n",
       "      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n",
       "      root._bokeh_failed_load = true;\n",
       "    } else if (force !== true) {\n",
       "      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n",
       "      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n",
       "    }\n",
       "\n",
       "  }\n",
       "\n",
       "  if (root._bokeh_is_loading === 0) {\n",
       "    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n",
       "    run_inline_js();\n",
       "  } else {\n",
       "    load_libs(css_urls, js_urls, function() {\n",
       "      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n",
       "      run_inline_js();\n",
       "    });\n",
       "  }\n",
       "}(window));"
      ],
      "application/vnd.bokehjs_load.v0+json": "\n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  \n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1001\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error() {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (var i = 0; i < css_urls.length; i++) {\n      var url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\": \"T2yuo9Oe71Cz/I4X9Ac5+gpEa5a8PpJCDlqKYO0CfAuEszu1JrXLl8YugMqYe3sM\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\": \"98GDGJ0kOMCUMUePhksaQ/GYgB3+NH9h996V88sh3aOiUNX3N+fLXAtry6xctSZ6\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\": \"89bArO+nlbP3sgakeHjCo1JYxYR5wufVgA3IbUvDY+K7w4zyxJqssu7wVnfeKCq8\"};\n\n    for (var i = 0; i < js_urls.length; i++) {\n      var url = js_urls[i];\n      var element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error;\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = \"anonymous\";\n        element.integrity = \"sha384-\" + hashes[url];\n      }\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.2.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.2.3.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1001\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window));"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set_context('talk')\n",
    "bpl.output_notebook()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bizarre-cricket",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Download data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "permanent-publisher",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# %%bash\n",
    "\n",
    "# wget --no-clobber https://parltrack.org/dumps/ep_votes.json.lz\n",
    "# lzip -d ep_votes.json.lz\n",
    "\n",
    "# wget --no-clobber https://parltrack.org/dumps/ep_meps.json.lz\n",
    "# lzip -d ep_meps.json.lz"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "phantom-afghanistan",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Transform JSON to dataframes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "piano-plaza",
   "metadata": {
    "tags": []
   },
   "source": [
    "### MEPs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "primary-pakistan",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "25092f0339294c2bb9d71011df19a5a3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/4150 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fname = 'ep_meps.json'\n",
    "\n",
    "tmp = []\n",
    "with open(fname) as fd:\n",
    "    for line in tqdm(fd.readlines()):\n",
    "        line = line.lstrip('[,]')\n",
    "        if len(line) == 0:\n",
    "            continue\n",
    "\n",
    "        data = json.loads(line)\n",
    "\n",
    "        #         if not data['active']:\n",
    "        #             continue\n",
    "\n",
    "        tmp.append(\n",
    "            {\n",
    "                'UserID': data['UserID'],\n",
    "                'name': data['Name']['full'],\n",
    "                'birthday': data['Birth']['date'] if 'Birth' in data else np.nan,\n",
    "                'active': data['active'],\n",
    "                'group': data.get('Groups', [{'groupid': np.nan}])[-1][\n",
    "                    'groupid'\n",
    "                ],  # assumption: last group is latest one. Is this true?\n",
    "            }\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "typical-triple",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>birthday</th>\n",
       "      <th>active</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UserID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2307</th>\n",
       "      <td>Hubert PIRKER</td>\n",
       "      <td>1948-10-03</td>\n",
       "      <td>False</td>\n",
       "      <td>PPE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>111496</th>\n",
       "      <td>María Auxiliadora CORREA ZAMORA</td>\n",
       "      <td>1972-05-24</td>\n",
       "      <td>False</td>\n",
       "      <td>PPE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110987</th>\n",
       "      <td>Gino TREMATERRA</td>\n",
       "      <td>1940-09-03</td>\n",
       "      <td>False</td>\n",
       "      <td>PPE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1965</th>\n",
       "      <td>Jan MULDER</td>\n",
       "      <td>1943-10-03</td>\n",
       "      <td>False</td>\n",
       "      <td>ALDE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39321</th>\n",
       "      <td>Vicente Miguel GARCÉS RAMÓN</td>\n",
       "      <td>1946-11-10</td>\n",
       "      <td>False</td>\n",
       "      <td>S&amp;D</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   name   birthday  active group\n",
       "UserID                                                          \n",
       "2307                      Hubert PIRKER 1948-10-03   False   PPE\n",
       "111496  María Auxiliadora CORREA ZAMORA 1972-05-24   False   PPE\n",
       "110987                  Gino TREMATERRA 1940-09-03   False   PPE\n",
       "1965                         Jan MULDER 1943-10-03   False  ALDE\n",
       "39321       Vicente Miguel GARCÉS RAMÓN 1946-11-10   False   S&D"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_meps = pd.DataFrame(tmp)\n",
    "df_meps['birthday'] = pd.to_datetime(df_meps['birthday'])\n",
    "\n",
    "df_meps.set_index('UserID', inplace=True)\n",
    "\n",
    "df_meps['group'].replace(\n",
    "    {'Group of the European United Left - Nordic Green Left': 'GUE/NGL'}, inplace=True\n",
    ")  # is there a difference?\n",
    "\n",
    "df_meps.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "nominated-fleece",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Votes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "shaped-adjustment",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f0109c2dcfd74e9cad3737de0d9a46ac",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/23906 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fname = 'ep_votes.json'\n",
    "\n",
    "tmp = []\n",
    "tmp_matrix = {}\n",
    "with open(fname) as fd:\n",
    "    for line in tqdm(fd.readlines()):\n",
    "        line = line.lstrip('[,]')\n",
    "        if len(line) == 0:\n",
    "            continue\n",
    "\n",
    "        data = json.loads(line)\n",
    "        tmp.append(\n",
    "            {'date': data['ts'], 'voteid': data['voteid'], 'title': data['title']}\n",
    "        )\n",
    "\n",
    "        if 'votes' in data:\n",
    "            tmp_matrix[data['voteid']] = {\n",
    "                **{\n",
    "                    mep['mepid']: '+'\n",
    "                    for mep_list in data['votes']\n",
    "                    .get('+', {'groups': {'foo': []}})['groups']\n",
    "                    .values()\n",
    "                    for mep in mep_list\n",
    "                    if 'mepid' in mep\n",
    "                },\n",
    "                **{\n",
    "                    mep['mepid']: '-'\n",
    "                    for mep_list in data['votes']\n",
    "                    .get('-', {'groups': {'foo': []}})['groups']\n",
    "                    .values()\n",
    "                    for mep in mep_list\n",
    "                    if 'mepid' in mep\n",
    "                },\n",
    "                **{\n",
    "                    mep['mepid']: '0'\n",
    "                    for mep_list in data['votes']\n",
    "                    .get('0', {'groups': {'foo': []}})['groups']\n",
    "                    .values()\n",
    "                    for mep in mep_list\n",
    "                    if 'mepid' in mep\n",
    "                },\n",
    "            }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "clinical-advisory",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>mepid</th>\n",
       "      <th>1</th>\n",
       "      <th>234</th>\n",
       "      <th>684</th>\n",
       "      <th>729</th>\n",
       "      <th>840</th>\n",
       "      <th>945</th>\n",
       "      <th>966</th>\n",
       "      <th>988</th>\n",
       "      <th>997</th>\n",
       "      <th>1002</th>\n",
       "      <th>...</th>\n",
       "      <th>204416</th>\n",
       "      <th>204418</th>\n",
       "      <th>204419</th>\n",
       "      <th>204420</th>\n",
       "      <th>204421</th>\n",
       "      <th>204443</th>\n",
       "      <th>204449</th>\n",
       "      <th>204733</th>\n",
       "      <th>205452</th>\n",
       "      <th>206158</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>voteid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7754</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7818</th>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7759</th>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7755</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7760</th>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 2329 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "mepid  1      234    684    729    840    945    966    988    997    1002    \\\n",
       "voteid                                                                         \n",
       "7754      NaN    NaN      +      +    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "7818        -      +      -      -    NaN      -    NaN    NaN      +      -   \n",
       "7759        +      +      +      +    NaN      +      +    NaN      +    NaN   \n",
       "7755      NaN      0      +    NaN    NaN      +      0    NaN      +      +   \n",
       "7760        -      -      -      -    NaN      -      +    NaN      +      -   \n",
       "\n",
       "mepid   ... 204416 204418 204419 204420 204421 204443 204449 204733 205452  \\\n",
       "voteid  ...                                                                  \n",
       "7754    ...    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "7818    ...    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "7759    ...    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "7755    ...    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "7760    ...    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "\n",
       "mepid  206158  \n",
       "voteid         \n",
       "7754      NaN  \n",
       "7818      NaN  \n",
       "7759      NaN  \n",
       "7755      NaN  \n",
       "7760      NaN  \n",
       "\n",
       "[5 rows x 2329 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votematrix = pd.DataFrame.from_dict(tmp_matrix, orient='index')\n",
    "\n",
    "df_votematrix.index.name = 'voteid'\n",
    "df_votematrix.columns.name = 'mepid'\n",
    "\n",
    "# df_votematrix.sort_values('voteid', axis=0, inplace=True)\n",
    "df_votematrix.sort_values('mepid', axis=1, inplace=True)\n",
    "\n",
    "df_votematrix.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "optical-community",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>title</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>voteid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>116359</th>\n",
       "      <td>2020-07-23 12:49:32</td>\n",
       "      <td>B9-0229/2020 - Am 23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116398</th>\n",
       "      <td>2020-07-23 12:49:32</td>\n",
       "      <td>B9-0229/2020 - § 26/1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116399</th>\n",
       "      <td>2020-07-23 12:49:32</td>\n",
       "      <td>B9-0229/2020 - § 26/2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116360</th>\n",
       "      <td>2020-07-23 12:49:32</td>\n",
       "      <td>B9-0229/2020 - Am 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116401</th>\n",
       "      <td>2020-07-23 16:52:06</td>\n",
       "      <td>B9-0229/2020 - Résolution</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      date                      title\n",
       "voteid                                               \n",
       "116359 2020-07-23 12:49:32       B9-0229/2020 - Am 23\n",
       "116398 2020-07-23 12:49:32      B9-0229/2020 - § 26/1\n",
       "116399 2020-07-23 12:49:32      B9-0229/2020 - § 26/2\n",
       "116360 2020-07-23 12:49:32        B9-0229/2020 - Am 1\n",
       "116401 2020-07-23 16:52:06  B9-0229/2020 - Résolution"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes = pd.DataFrame(tmp)\n",
    "df_votes['date'] = pd.to_datetime(df_votes['date'])\n",
    "\n",
    "df_votes.set_index('voteid', inplace=True)\n",
    "\n",
    "df_votes.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "nervous-ballet",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Exploration"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "expensive-pipeline",
   "metadata": {
    "tags": []
   },
   "source": [
    "### MEP party distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "prescription-shield",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "705"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_meps['active'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "instant-arthritis",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-1.1107175100739686,\n",
       " 1.1005103586792213,\n",
       " -1.1057638158926402,\n",
       " 1.1094386022707399)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "group_counts = df_meps.loc[df_meps['active'], 'group'].value_counts()\n",
    "labels = group_counts.to_frame().apply(lambda x: f'{x.name} ({x.iloc[0]})', axis=1)\n",
    "\n",
    "ax = group_counts.plot.pie(figsize=(8, 6), labels=labels, wedgeprops=dict(width=0.5))\n",
    "ax.axis('equal')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "passing-waste",
   "metadata": {
    "tags": []
   },
   "source": [
    "### MEP age distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "traditional-report",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_meps['age'] = (pd.Timestamp.today() - df_meps['birthday']) / np.timedelta64(1, 'Y')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "durable-international",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x15fcc2970>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x648 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.displot(\n",
    "    data=df_meps[df_meps['active']],\n",
    "    x='age',\n",
    "    col='group',\n",
    "    col_wrap=3,\n",
    "    height=3,\n",
    "    aspect=4 / 3,\n",
    ")\n",
    "\n",
    "g.set_xlabels('MEP age [years]')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "transsexual-gamma",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Voting patterns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "accurate-watershed",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>mepid</th>\n",
       "      <th>1</th>\n",
       "      <th>234</th>\n",
       "      <th>684</th>\n",
       "      <th>729</th>\n",
       "      <th>840</th>\n",
       "      <th>945</th>\n",
       "      <th>966</th>\n",
       "      <th>988</th>\n",
       "      <th>997</th>\n",
       "      <th>1002</th>\n",
       "      <th>...</th>\n",
       "      <th>204416</th>\n",
       "      <th>204418</th>\n",
       "      <th>204419</th>\n",
       "      <th>204420</th>\n",
       "      <th>204421</th>\n",
       "      <th>204443</th>\n",
       "      <th>204449</th>\n",
       "      <th>204733</th>\n",
       "      <th>205452</th>\n",
       "      <th>206158</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>voteid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7754</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7818</th>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7759</th>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7755</th>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7760</th>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 2329 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "mepid  1      234    684    729    840    945    966    988    997    1002    \\\n",
       "voteid                                                                         \n",
       "7754      NaN    NaN      +      +    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "7818        -      +      -      -    NaN      -    NaN    NaN      +      -   \n",
       "7759        +      +      +      +    NaN      +      +    NaN      +    NaN   \n",
       "7755      NaN      0      +    NaN    NaN      +      0    NaN      +      +   \n",
       "7760        -      -      -      -    NaN      -      +    NaN      +      -   \n",
       "\n",
       "mepid   ... 204416 204418 204419 204420 204421 204443 204449 204733 205452  \\\n",
       "voteid  ...                                                                  \n",
       "7754    ...    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "7818    ...    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "7759    ...    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "7755    ...    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "7760    ...    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN    NaN   \n",
       "\n",
       "mepid  206158  \n",
       "voteid         \n",
       "7754      NaN  \n",
       "7818      NaN  \n",
       "7759      NaN  \n",
       "7755      NaN  \n",
       "7760      NaN  \n",
       "\n",
       "[5 rows x 2329 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votematrix.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "marine-logistics",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Zoomed-out voting data overview"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cognitive-range",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "hm_sub = (\n",
    "    df_votematrix.loc[\n",
    "        df_votes[df_votes['date'] > '20200721'].index, df_meps[df_meps['active']].index\n",
    "    ]\n",
    "    .dropna(axis=1)\n",
    "    .replace({'+': 1, '-': 0, '0': -1})\n",
    "    .T.merge(df_meps[['group']], how='inner', left_index=True, right_index=True)\n",
    "    .set_index('group', append=True)\n",
    "    .reorder_levels(['group', 'UserID'])\n",
    "    .sort_index()\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "split-thousand",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>116365</th>\n",
       "      <th>116366</th>\n",
       "      <th>116368</th>\n",
       "      <th>116369</th>\n",
       "      <th>116370</th>\n",
       "      <th>116371</th>\n",
       "      <th>116326</th>\n",
       "      <th>116327</th>\n",
       "      <th>116328</th>\n",
       "      <th>116329</th>\n",
       "      <th>...</th>\n",
       "      <th>116355</th>\n",
       "      <th>116356</th>\n",
       "      <th>116357</th>\n",
       "      <th>116396</th>\n",
       "      <th>116358</th>\n",
       "      <th>116359</th>\n",
       "      <th>116398</th>\n",
       "      <th>116399</th>\n",
       "      <th>116360</th>\n",
       "      <th>116401</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th>UserID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">ECR</th>\n",
       "      <th>4465</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4746</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23712</th>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23788</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28297</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 62 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              116365  116366  116368  116369  116370  116371  116326  116327  \\\n",
       "group UserID                                                                   \n",
       "ECR   4465         1       1       1       1       1       1       1       1   \n",
       "      4746         1       1       1       1       1       1       1       1   \n",
       "      23712        1      -1      -1       0       0       0       0       0   \n",
       "      23788        1       1       1       1       1      -1       0      -1   \n",
       "      28297        1       1       1       1       1      -1       0      -1   \n",
       "\n",
       "              116328  116329  ...  116355  116356  116357  116396  116358  \\\n",
       "group UserID                  ...                                           \n",
       "ECR   4465         0       1  ...       1      -1       0      -1       0   \n",
       "      4746         0       1  ...       1      -1       0      -1       0   \n",
       "      23712        0       0  ...       0       1       0       0       0   \n",
       "      23788        0       0  ...       0       0       1       1      -1   \n",
       "      28297        0       0  ...       0       0       1       1      -1   \n",
       "\n",
       "              116359  116398  116399  116360  116401  \n",
       "group UserID                                          \n",
       "ECR   4465         1       1       1       0      -1  \n",
       "      4746         1       1       1       0      -1  \n",
       "      23712       -1       1      -1       0       0  \n",
       "      23788       -1       1       1       0       0  \n",
       "      28297       -1       1       1       0       0  \n",
       "\n",
       "[5 rows x 62 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hm_sub.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "still-force",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>116365</th>\n",
       "      <th>116366</th>\n",
       "      <th>116368</th>\n",
       "      <th>116369</th>\n",
       "      <th>116370</th>\n",
       "      <th>116371</th>\n",
       "      <th>116326</th>\n",
       "      <th>116327</th>\n",
       "      <th>116328</th>\n",
       "      <th>116329</th>\n",
       "      <th>...</th>\n",
       "      <th>116355</th>\n",
       "      <th>116356</th>\n",
       "      <th>116357</th>\n",
       "      <th>116396</th>\n",
       "      <th>116358</th>\n",
       "      <th>116359</th>\n",
       "      <th>116398</th>\n",
       "      <th>116399</th>\n",
       "      <th>116360</th>\n",
       "      <th>116401</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ECR</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GUE/NGL</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ID</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NA</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PPE</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 62 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         116365  116366  116368  116369  116370  116371  116326  116327  \\\n",
       "group                                                                     \n",
       "ECR           1       1       1       1       1      -1       0      -1   \n",
       "GUE/NGL       1       1       1       0       1       1       1       1   \n",
       "ID            1       1       0       0       1       1       0       0   \n",
       "NA            1       1       1       1       1       1       1       1   \n",
       "PPE           1       1       1       1       1       1       0       0   \n",
       "\n",
       "         116328  116329  ...  116355  116356  116357  116396  116358  116359  \\\n",
       "group                    ...                                                   \n",
       "ECR           0       0  ...       0       0       0       1       0      -1   \n",
       "GUE/NGL       1       1  ...       0       0       1       1       1       1   \n",
       "ID            1       1  ...       1       1       1       1      -1       1   \n",
       "NA            1       1  ...       0       0       1       1       1       1   \n",
       "PPE           0       0  ...       0       0       0       1       0       0   \n",
       "\n",
       "         116398  116399  116360  116401  \n",
       "group                                    \n",
       "ECR           1       1       0       0  \n",
       "GUE/NGL       1       1       1       1  \n",
       "ID            1       1       1       0  \n",
       "NA            1       1      -1       1  \n",
       "PPE           1       1       0       1  \n",
       "\n",
       "[5 rows x 62 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hm_sub_grpd = hm_sub.groupby('group').agg(lambda x: x.value_counts().index[0])\n",
    "hm_sub_grpd.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "greek-institution",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.matrix.ClusterGrid at 0x15ff0cb80>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.clustermap(hm_sub_grpd.T)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "premier-montgomery",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Who is the most active MEP?\n",
    "\n",
    "Here we equate \"active\" with \"has voted most often\". This is most likely quite misleading."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "second-country",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_hasvoted = ~df_votematrix[df_meps[df_meps['active']].index].isna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "invisible-wrist",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vote_count</th>\n",
       "      <th>name</th>\n",
       "      <th>birthday</th>\n",
       "      <th>active</th>\n",
       "      <th>group</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mepid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>28266</th>\n",
       "      <td>22954</td>\n",
       "      <td>Sophia in 't VELD</td>\n",
       "      <td>1963-09-13</td>\n",
       "      <td>True</td>\n",
       "      <td>RE</td>\n",
       "      <td>57.593899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1913</th>\n",
       "      <td>22703</td>\n",
       "      <td>Evelyne GEBHARDT</td>\n",
       "      <td>1954-01-19</td>\n",
       "      <td>True</td>\n",
       "      <td>S&amp;D</td>\n",
       "      <td>67.242284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2323</th>\n",
       "      <td>22394</td>\n",
       "      <td>Rainer WIELAND</td>\n",
       "      <td>1957-02-19</td>\n",
       "      <td>True</td>\n",
       "      <td>PPE</td>\n",
       "      <td>64.156662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4246</th>\n",
       "      <td>22324</td>\n",
       "      <td>Othmar KARAS</td>\n",
       "      <td>1957-12-24</td>\n",
       "      <td>True</td>\n",
       "      <td>PPE</td>\n",
       "      <td>63.313387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28219</th>\n",
       "      <td>22324</td>\n",
       "      <td>Daniel CASPARY</td>\n",
       "      <td>1976-04-04</td>\n",
       "      <td>True</td>\n",
       "      <td>PPE</td>\n",
       "      <td>45.035120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2341</th>\n",
       "      <td>22269</td>\n",
       "      <td>Michael GAHLER</td>\n",
       "      <td>1960-04-22</td>\n",
       "      <td>True</td>\n",
       "      <td>PPE</td>\n",
       "      <td>60.986166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28224</th>\n",
       "      <td>22164</td>\n",
       "      <td>Markus PIEPER</td>\n",
       "      <td>1963-05-15</td>\n",
       "      <td>True</td>\n",
       "      <td>PPE</td>\n",
       "      <td>57.925186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28298</th>\n",
       "      <td>21992</td>\n",
       "      <td>Iratxe GARCÍA PÉREZ</td>\n",
       "      <td>1974-10-07</td>\n",
       "      <td>True</td>\n",
       "      <td>S&amp;D</td>\n",
       "      <td>46.527279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23821</th>\n",
       "      <td>21912</td>\n",
       "      <td>József SZÁJER</td>\n",
       "      <td>1961-09-07</td>\n",
       "      <td>True</td>\n",
       "      <td>PPE</td>\n",
       "      <td>59.608999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28223</th>\n",
       "      <td>21910</td>\n",
       "      <td>Andreas SCHWAB</td>\n",
       "      <td>1973-04-09</td>\n",
       "      <td>True</td>\n",
       "      <td>PPE</td>\n",
       "      <td>48.022177</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       vote_count                 name   birthday  active group        age\n",
       "mepid                                                                     \n",
       "28266       22954    Sophia in 't VELD 1963-09-13    True    RE  57.593899\n",
       "1913        22703     Evelyne GEBHARDT 1954-01-19    True   S&D  67.242284\n",
       "2323        22394       Rainer WIELAND 1957-02-19    True   PPE  64.156662\n",
       "4246        22324         Othmar KARAS 1957-12-24    True   PPE  63.313387\n",
       "28219       22324       Daniel CASPARY 1976-04-04    True   PPE  45.035120\n",
       "2341        22269       Michael GAHLER 1960-04-22    True   PPE  60.986166\n",
       "28224       22164        Markus PIEPER 1963-05-15    True   PPE  57.925186\n",
       "28298       21992  Iratxe GARCÍA PÉREZ 1974-10-07    True   S&D  46.527279\n",
       "23821       21912        József SZÁJER 1961-09-07    True   PPE  59.608999\n",
       "28223       21910       Andreas SCHWAB 1973-04-09    True   PPE  48.022177"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_hasvoted.sum(axis=0).sort_values(ascending=False).to_frame('vote_count').merge(\n",
    "    df_meps, how='left', left_index=True, right_index=True\n",
    ").head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "random-think",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Cluster MEPs by votes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "independent-bottle",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Prepare data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ongoing-calcium",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>mepid</th>\n",
       "      <th>96750</th>\n",
       "      <th>4746</th>\n",
       "      <th>23788</th>\n",
       "      <th>96810</th>\n",
       "      <th>96808</th>\n",
       "      <th>4560</th>\n",
       "      <th>38595</th>\n",
       "      <th>1992</th>\n",
       "      <th>125106</th>\n",
       "      <th>4391</th>\n",
       "      <th>...</th>\n",
       "      <th>204413</th>\n",
       "      <th>204334</th>\n",
       "      <th>204331</th>\n",
       "      <th>204346</th>\n",
       "      <th>204449</th>\n",
       "      <th>204400</th>\n",
       "      <th>197780</th>\n",
       "      <th>204733</th>\n",
       "      <th>205452</th>\n",
       "      <th>206158</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>voteid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>115197</th>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>...</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115198</th>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>...</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115055</th>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>...</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115200</th>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>...</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>+</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115201</th>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>...</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>+</td>\n",
       "      <td>-</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 705 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "mepid  96750  4746   23788  96810  96808  4560   38595  1992   125106 4391    \\\n",
       "voteid                                                                         \n",
       "115197      +      +      +      +      +      +      +      +      +      +   \n",
       "115198      +      -      -      -      +      +      +      +      -      +   \n",
       "115055      +      -      -      -      +      +      +      +      -      +   \n",
       "115200      -      -      -      -      -      -      -      -      -      -   \n",
       "115201      +      -      -      -      -      -      +      -      -      -   \n",
       "\n",
       "mepid   ... 204413 204334 204331 204346 204449 204400 197780 204733 205452  \\\n",
       "voteid  ...                                                                  \n",
       "115197  ...      +      -      +      +      +      +      +      +      +   \n",
       "115198  ...      +      -      +      -      +      +      +      +      +   \n",
       "115055  ...      +      +      -      -      +      -      -      +      +   \n",
       "115200  ...      -      -      -      -      -      -      -      +      +   \n",
       "115201  ...      +      -      -      -      -      -      -      +      -   \n",
       "\n",
       "mepid  206158  \n",
       "voteid         \n",
       "115197    NaN  \n",
       "115198    NaN  \n",
       "115055    NaN  \n",
       "115200    NaN  \n",
       "115201    NaN  \n",
       "\n",
       "[5 rows x 705 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_subset = df_votematrix[df_meps[df_meps['active']].index].tail(1000)\n",
    "df_subset.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "silent-infrared",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Do clustering\n",
    "\n",
    "Possible metrics:\n",
    "hamming\n",
    "jaccard\n",
    "dice\n",
    "russellrao\n",
    "kulsinski\n",
    "rogerstanimoto\n",
    "sokalmichener\n",
    "sokalsneath\n",
    "yule"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "subjective-intersection",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(705, 3)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MCA0</th>\n",
       "      <th>MCA1</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mepid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>96750</th>\n",
       "      <td>-0.378434</td>\n",
       "      <td>0.620655</td>\n",
       "      <td>Verts/ALE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4746</th>\n",
       "      <td>0.741391</td>\n",
       "      <td>-0.488453</td>\n",
       "      <td>ECR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23788</th>\n",
       "      <td>0.504421</td>\n",
       "      <td>-0.913227</td>\n",
       "      <td>ECR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96810</th>\n",
       "      <td>0.743789</td>\n",
       "      <td>-0.495060</td>\n",
       "      <td>ECR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96808</th>\n",
       "      <td>-0.281795</td>\n",
       "      <td>-0.354040</td>\n",
       "      <td>PPE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           MCA0      MCA1      group\n",
       "mepid                               \n",
       "96750 -0.378434  0.620655  Verts/ALE\n",
       "4746   0.741391 -0.488453        ECR\n",
       "23788  0.504421 -0.913227        ECR\n",
       "96810  0.743789 -0.495060        ECR\n",
       "96808 -0.281795 -0.354040        PPE"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mca = prince.MCA(n_components=2)\n",
    "df_mca = mca.fit_transform(df_subset.T)\n",
    "\n",
    "df_mca.columns = ('MCA0', 'MCA1')\n",
    "df_mca.index.rename('mepid', inplace=True)\n",
    "df_mca['group'] = df_meps.loc[df_meps['active'], 'group']\n",
    "\n",
    "print(df_mca.shape)\n",
    "df_mca.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "understood-surveillance",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Static visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "patient-establishment",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'MEPs Clustering based on Voting Patterns')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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blJRUdGf0Y7/+uuvxzz00EMdox1769at+wYOHEjZuhrQE088kZuamup1Op3CTz/9pPv000/j9u7dq96+fftBQThzb9irVy/nfffdV1B9+7S0NG+TVriFoyCrjVHJpLjxovZIMijxyrrDOFHqhEzCML5vMv46qisSDcrmriIhhBDS5kyZMqV048aNhs8//9x4zz331AhMcnNzpb///rt+4sSJJecTYAHAr7/+qpk7d27SPffcU3yuQdbhw4fl2dnZyrlz554IX/7bb7+psrOzlcnJyd7FixfHRAqyzkbFjX/15WlpaTSAvIFNmDDBOnToUBcAPPbYY8Xjx4/HqlWrzD/99JP6iiuucFaUS0xM9N53333n9XttCyjIaoOMajnG903B4LQYeP1BSAQGg1IGtYIuB0IIIaQ53HzzzZZHH300uHjxYnOkIGvBggWmQCCAW2655ZxvbsvLy4VorWRna+nSpQatVhsYPXq0PXz5ggULYpKSkrxPP/107oMPPtgxLy9Pmpyc7D/X44Tf+JOmNXToUPuqVavMhw8fVoYHWaR+qF9YGxavU6KdSY0kg4oCLEIIIW2WPxjEyl15hpnztnWa9NavXWfO29Zp5a48gz/YdFOa6HS64MiRIy2//PKLvvo4GABYsmSJOTY21jd+/PjyI0eOyCZNmtTRbDb3lcvlA7p27drzvffeM4eXrxhns27dOu3NN9/cwWQy9e3Ro0evRx99NHn27NntAaB79+6V42sOHTokB4ClS5fqMzMzu+l0un5qtbp/x44de99///0p1euzbt06w9ChQ20KhaKyVS0YDGLZsmXm8ePHl02bNs0ik8n4vHnzTA3/brV+wQBH1h8FhlVv7eq05KU/uq56a1enrD8KDMFaMkA3tePHjysAICYmpkqQ7PP5WH5+vrT6y+l0Uva0MHRnTQghhJA267TVLZ3+0Zb0rEK7WmBAkAMCAzYcLDSnr9c6F94xOCvRoDznlpizMW3atJIVK1aYFyxYYPrrX/9aXLH88OHD8p07d2pnzJhRmJubKxs6dGgPmUzG77rrrgKz2RxYtWqV8S9/+Usnj8fDHnzwwZLwfc6aNatDfHy8729/+1uez+djY8aMseXk5CiWL19ufu65507Gxsb6ASApKcn/xx9/KKdMmdJlwIAB9qeeeipXIpEgKytL8fvvv2vD9+lyudjmzZt1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\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "\n",
    "sns.scatterplot(data=df_mca, x='MCA0', y='MCA1', hue='group')\n",
    "\n",
    "plt.legend(loc='upper left', bbox_to_anchor=(1.05, 1), ncol=2, title=None)\n",
    "plt.title('MEPs Clustering based on Voting Patterns')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "directed-stability",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Interactive visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "smaller-reliance",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MCA0</th>\n",
       "      <th>MCA1</th>\n",
       "      <th>group</th>\n",
       "      <th>name</th>\n",
       "      <th>birthday</th>\n",
       "      <th>active</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mepid</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>96750</th>\n",
       "      <td>-0.378434</td>\n",
       "      <td>0.620655</td>\n",
       "      <td>Verts/ALE</td>\n",
       "      <td>François Alfonsi</td>\n",
       "      <td>1953-09-14</td>\n",
       "      <td>True</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4746</th>\n",
       "      <td>0.741391</td>\n",
       "      <td>-0.488453</td>\n",
       "      <td>ECR</td>\n",
       "      <td>Sergio Berlato</td>\n",
       "      <td>1959-07-27</td>\n",
       "      <td>True</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23788</th>\n",
       "      <td>0.504421</td>\n",
       "      <td>-0.913227</td>\n",
       "      <td>ECR</td>\n",
       "      <td>Adam Bielan</td>\n",
       "      <td>1974-09-12</td>\n",
       "      <td>True</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96810</th>\n",
       "      <td>0.743789</td>\n",
       "      <td>-0.495060</td>\n",
       "      <td>ECR</td>\n",
       "      <td>Carlo Fidanza</td>\n",
       "      <td>1976-09-21</td>\n",
       "      <td>True</td>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96808</th>\n",
       "      <td>-0.281795</td>\n",
       "      <td>-0.354040</td>\n",
       "      <td>PPE</td>\n",
       "      <td>Pablo Arias Echeverría</td>\n",
       "      <td>1970-06-30</td>\n",
       "      <td>True</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           MCA0      MCA1      group                    name    birthday  \\\n",
       "mepid                                                                      \n",
       "96750 -0.378434  0.620655  Verts/ALE        François Alfonsi  1953-09-14   \n",
       "4746   0.741391 -0.488453        ECR          Sergio Berlato  1959-07-27   \n",
       "23788  0.504421 -0.913227        ECR             Adam Bielan  1974-09-12   \n",
       "96810  0.743789 -0.495060        ECR           Carlo Fidanza  1976-09-21   \n",
       "96808 -0.281795 -0.354040        PPE  Pablo Arias Echeverría  1970-06-30   \n",
       "\n",
       "       active  age  \n",
       "mepid               \n",
       "96750    True   67  \n",
       "4746     True   61  \n",
       "23788    True   46  \n",
       "96810    True   44  \n",
       "96808    True   50  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# generate data for each tooltip\n",
    "hover_data = df_meps.loc[df_mca.index]\n",
    "\n",
    "hover_data['name'] = hover_data['name'].str.title()\n",
    "hover_data['birthday'] = hover_data['birthday'].apply(\n",
    "    lambda x: x.strftime(\"%Y-%m-%d\") if not pd.isnull(x) else 'undef'\n",
    ")\n",
    "hover_data['age'] = hover_data['age'].apply(\n",
    "    lambda x: int(x) if not pd.isnull(x) else -1\n",
    ")\n",
    "\n",
    "df_data = df_mca.merge(\n",
    "    hover_data.drop('group', axis=1), left_index=True, right_index=True\n",
    ")\n",
    "df_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "colored-biography",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# set up point colors\n",
    "palette = d3['Category10'][df_data['group'].nunique()]\n",
    "color_map = bmo.CategoricalColorMapper(\n",
    "    factors=df_data['group'].unique(), palette=palette\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "automatic-repository",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "\n",
       "  <div class=\"bk-root\" id=\"65f67833-4408-4011-bfe3-a7ee115fdb48\" data-root-id=\"1003\"></div>\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "(function(root) {\n",
       "  function embed_document(root) {\n",
       "    \n",
       "  var docs_json = {\"0e09381f-0cd5-4b66-8395-f78f4e29ea8b\":{\"roots\":{\"references\":[{\"attributes\":{\"background_fill_color\":\"black\",\"below\":[{\"id\":\"1012\"}],\"center\":[{\"id\":\"1015\"},{\"id\":\"1019\"},{\"id\":\"1047\"}],\"left\":[{\"id\":\"1016\"}],\"renderers\":[{\"id\":\"1036\"}],\"title\":{\"id\":\"1038\"},\"toolbar\":{\"id\":\"1026\"},\"x_range\":{\"id\":\"1004\"},\"x_scale\":{\"id\":\"1008\"},\"y_range\":{\"id\":\"1006\"},\"y_scale\":{\"id\":\"1010\"}},\"id\":\"1003\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"label\":{\"field\":\"group\"},\"renderers\":[{\"id\":\"1036\"}]},\"id\":\"1048\",\"type\":\"LegendItem\"},{\"attributes\":{\"formatter\":{\"id\":\"1040\"},\"ticker\":{\"id\":\"1013\"},\"visible\":false},\"id\":\"1012\",\"type\":\"LinearAxis\"},{\"attributes\":{\"items\":[{\"id\":\"1048\"}]},\"id\":\"1047\",\"type\":\"Legend\"},{\"attributes\":{},\"id\":\"1017\",\"type\":\"BasicTicker\"},{\"attributes\":{\"factors\":[\"Verts/ALE\",\"ECR\",\"PPE\",\"S&D\",\"RE\",\"ID\",\"GUE/NGL\",\"NA\"],\"palette\":[\"#1f77b4\",\"#ff7f0e\",\"#2ca02c\",\"#d62728\",\"#9467bd\",\"#8c564b\",\"#e377c2\",\"#7f7f7f\"]},\"id\":\"1002\",\"type\":\"CategoricalColorMapper\"},{\"attributes\":{},\"id\":\"1046\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1045\",\"type\":\"Selection\"},{\"attributes\":{\"active_drag\":\"auto\",\"active_inspect\":\"auto\",\"active_multi\":null,\"active_scroll\":\"auto\",\"active_tap\":\"auto\",\"tools\":[{\"id\":\"1020\"},{\"id\":\"1021\"},{\"id\":\"1022\"},{\"id\":\"1023\"},{\"id\":\"1024\"}]},\"id\":\"1026\",\"type\":\"Toolbar\"},{\"attributes\":{\"source\":{\"id\":\"1032\"}},\"id\":\"1037\",\"type\":\"CDSView\"},{\"attributes\":{\"text\":\"\"},\"id\":\"1038\",\"type\":\"Title\"},{\"attributes\":{\"axis\":{\"id\":\"1016\"},\"dimension\":1,\"ticker\":null,\"visible\":false},\"id\":\"1019\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1004\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1042\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"axis\":{\"id\":\"1012\"},\"ticker\":null,\"visible\":false},\"id\":\"1015\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1006\",\"type\":\"DataRange1d\"},{\"attributes\":{\"overlay\":{\"id\":\"1025\"}},\"id\":\"1024\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"fill_color\":{\"field\":\"group\",\"transform\":{\"id\":\"1002\"}},\"line_color\":{\"field\":\"group\",\"transform\":{\"id\":\"1002\"}},\"size\":{\"units\":\"screen\",\"value\":5},\"x\":{\"field\":\"MCA0\"},\"y\":{\"field\":\"MCA1\"}},\"id\":\"1034\",\"type\":\"Scatter\"},{\"attributes\":{},\"id\":\"1010\",\"type\":\"LinearScale\"},{\"attributes\":{\"callback\":null,\"tooltips\":[[\"name\",\"@name\"],[\"birthday\",\"@birthday\"],[\"active\",\"@active\"],[\"group\",\"@group\"],[\"age\",\"@age\"]]},\"id\":\"1020\",\"type\":\"HoverTool\"},{\"attributes\":{\"formatter\":{\"id\":\"1042\"},\"ticker\":{\"id\":\"1017\"},\"visible\":false},\"id\":\"1016\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1013\",\"type\":\"BasicTicker\"},{\"attributes\":{\"data\":{\"MCA0\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[705]},\"MCA1\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[705]},\"active\":[true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"age\":[67,61,46,44,50,65,60,76,65,84,64,56,61,57,50,61,46,66,62,52,53,64,51,40,68,64,58,46,58,56,41,59,37,47,58,63,57,58,54,54,75,54,59,55,73,63,48,41,52,47,45,54,58,54,51,58,64,67,71,36,50,64,65,59,68,53,39,62,61,56,56,72,68,55,54,64,63,68,41,44,45,46,35,55,41,60,58,53,57,41,68,62,48,46,48,54,60,40,52,43,72,68,45,64,60,68,80,41,42,65,42,47,57,59,45,69,48,44,49,72,51,59,35,45,69,50,64,58,56,67,53,61,60,61,39,70,66,48,49,57,51,58,32,68,52,41,60,54,53,37,73,61,42,48,45,46,34,59,52,53,42,66,55,35,35,58,63,44,67,48,62,76,51,58,46,37,51,50,39,54,46,47,45,39,48,42,42,63,66,65,36,54,57,57,55,74,71,57,55,47,56,45,39,68,49,59,57,35,46,64,56,68,57,54,58,68,71,73,66,68,48,59,61,51,68,60,66,61,66,65,42,60,42,54,62,55,58,55,39,58,55,48,33,61,58,58,62,43,64,53,61,53,61,45,54,35,45,47,35,61,58,54,50,45,42,60,49,58,62,53,42,63,45,42,37,61,43,57,67,43,51,57,44,49,51,52,52,59,43,49,57,48,32,71,69,39,44,67,60,52,35,36,68,47,49,56,54,31,54,45,50,48,25,52,55,65,69,54,50,55,51,40,69,35,45,38,44,55,38,51,55,28,45,50,45,60,54,64,65,34,33,46,35,58,40,40,69,34,49,43,53,36,53,64,62,37,28,51,45,48,45,51,60,41,50,38,34,32,58,38,35,56,63,70,51,52,67,55,73,52,46,32,58,31,53,38,67,68,36,44,65,37,44,57,49,32,34,51,52,56,34,57,44,39,50,54,54,58,56,70,48,51,46,45,36,60,35,32,58,51,32,48,44,44,54,65,52,52,58,46,57,43,46,46,41,45,48,56,28,48,56,45,52,36,70,44,43,50,31,54,59,61,64,35,54,65,48,72,41,44,56,27,50,42,48,36,62,35,46,47,63,32,67,63,65,58,45,40,41,50,53,55,61,57,36,31,38,34,40,51,51,61,64,54,30,58,44,61,64,49,64,35,48,45,42,41,42,56,43,47,68,55,53,56,76,40,51,29,45,47,62,31,45,62,33,67,44,58,52,53,66,67,40,50,47,43,74,44,47,65,50,46,37,29,44,36,59,66,43,65,59,38,53,58,73,34,33,45,44,29,23,37,55,46,71,45,57,49,47,45,67,32,65,62,47,51,31,46,66,56,73,51,32,51,53,52,54,59,49,43,60,60,53,38,45,52,46,48,37,48,36,35,36,46,58,36,42,30,34,60,54,49,38,45,70,39,50,59,41,58,41,49,42,63,39,47,43,55,53,39,46,33,33,63,65,46,54,36,44,42,31,38,40,38,43,38,51,58,59,58,55,33,65,58,52,63,38,53,58,41,57,59,50,56,47,44,55,50,60,67,64,54,40,35,27,50,48,52,66,58,50,-1,40,53,28,49,45,49,63,53,48,54,56,48,64,47,34,34,-1,54,38,40,56,48,-1],\"birthday\":[\"1953-09-14\",\"1959-07-27\",\"1974-09-12\",\"1976-09-21\",\"1970-06-30\",\"1956-03-14\",\"1960-06-22\",\"1944-08-13\",\"1955-08-24\",\"1936-09-29\",\"1956-10-01\",\"1965-03-12\",\"1959-08-01\",\"1963-12-01\",\"1970-11-28\",\"1959-10-20\",\"1974-08-22\",\"1955-04-09\",\"1958-11-07\",\"1968-07-17\",\"1967-06-24\",\"1957-01-06\",\"1970-03-25\",\"1980-06-01\",\"1953-02-17\",\"1956-06-08\",\"1963-02-18\",\"1975-02-19\",\"1963-04-07\",\"1964-12-20\",\"1979-04-29\",\"1961-06-29\",\"1984-02-02\",\"1973-06-24\",\"1962-10-28\",\"1957-12-24\",\"1963-05-15\",\"1962-08-15\",\"1966-11-25\",\"1966-09-14\",\"1945-08-07\",\"1966-05-05\",\"1961-09-07\",\"1965-11-02\",\"1948-04-08\",\"1958-02-02\",\"1972-05-02\",\"1979-07-31\",\"1968-12-03\",\"1973-05-16\",\"1975-07-12\",\"1966-12-17\",\"1963-03-21\",\"1966-06-01\",\"1969-11-17\",\"1963-03-20\",\"1957-02-19\",\"1954-04-13\",\"1949-12-24\",\"1984-07-05\",\"1971-01-12\",\"1956-09-19\",\"1955-11-14\",\"1962-04-07\",\"1952-09-21\",\"1967-04-23\",\"1981-09-20\",\"1958-06-20\",\"1959-07-24\",\"1965-03-03\",\"1964-10-24\",\"1948-09-12\",\"1952-09-03\",\"1966-03-13\",\"1967-01-09\",\"1956-10-14\",\"1957-09-07\",\"1952-07-31\",\"1980-03-26\",\"1976-10-26\",\"1976-04-12\",\"1974-10-06\",\"1985-12-05\",\"1965-10-15\",\"1979-07-12\",\"1961-03-26\",\"1963-03-14\",\"1968-01-21\",\"1963-07-02\",\"1979-11-02\",\"1953-01-26\",\"1958-09-03\",\"1973-04-09\",\"1975-02-28\",\"1972-05-19\",\"1966-10-15\",\"1960-09-15\",\"1981-01-20\",\"1969-03-30\",\"1977-12-22\",\"1948-09-19\",\"1952-12-22\",\"1975-07-01\",\"1956-11-30\",\"1960-11-04\",\"1952-08-11\",\"1940-07-03\",\"1980-02-21\",\"1979-03-04\",\"1955-12-01\",\"1979-04-08\",\"1973-10-01\",\"1964-03-14\",\"1961-06-22\",\"1975-11-24\",\"1952-02-06\",\"1973-03-31\",\"1976-07-26\",\"1971-05-09\",\"1949-03-22\",\"1969-09-14\",\"1961-04-29\",\"1986-01-01\",\"1976-04-04\",\"1951-06-13\",\"1971-02-11\",\"1956-05-30\",\"1962-05-25\",\"1964-08-21\",\"1954-01-19\",\"1967-08-04\",\"1959-04-19\",\"1960-04-22\",\"1959-05-28\",\"1982-04-08\",\"1950-05-08\",\"1955-04-14\",\"1972-06-04\",\"1971-10-27\",\"1964-01-14\",\"1969-11-18\",\"1962-12-07\",\"1988-07-07\",\"1953-02-27\",\"1969-03-04\",\"1979-09-16\",\"1961-02-05\",\"1966-10-28\",\"1967-05-26\",\"1984-01-14\",\"1947-08-19\",\"1959-05-24\",\"1978-11-20\",\"1972-06-03\",\"1976-02-20\",\"1974-04-20\",\"1986-07-11\",\"1961-09-30\",\"1968-05-25\",\"1968-02-18\",\"1978-10-26\",\"1955-03-21\",\"1966-03-18\",\"1985-11-11\",\"1985-08-17\",\"1963-03-11\",\"1957-09-27\",\"1976-05-19\",\"1953-08-04\",\"1972-12-02\",\"1958-05-11\",\"1945-01-06\",\"1969-09-30\",\"1963-01-25\",\"1974-09-25\",\"1983-09-11\",\"1969-05-22\",\"1971-02-04\",\"1982-01-27\",\"1966-09-06\",\"1974-06-27\",\"1973-10-12\",\"1975-12-04\",\"1981-11-22\",\"1972-05-22\",\"1978-05-06\",\"1979-01-18\",\"1958-01-07\",\"1954-11-05\",\"1956-02-26\",\"1984-04-29\",\"1966-12-17\",\"1963-09-13\",\"1963-11-06\",\"1965-05-15\",\"1946-09-18\",\"1950-03-26\",\"1963-08-17\",\"1965-05-20\",\"1973-07-12\",\"1965-01-15\",\"1975-06-28\",\"1982-02-21\",\"1952-04-26\",\"1971-05-26\",\"1961-06-10\",\"1963-05-16\",\"1986-01-26\",\"1974-10-07\",\"1956-09-14\",\"1965-02-11\",\"1953-04-11\",\"1963-10-28\",\"1966-08-22\",\"1963-02-02\",\"1953-04-11\",\"1950-03-17\",\"1948-02-28\",\"1955-03-08\",\"1953-02-09\",\"1972-07-14\",\"1961-08-31\",\"1959-04-24\",\"1970-04-01\",\"1952-06-04\",\"1961-03-27\",\"1954-06-21\",\"1959-06-13\",\"1954-11-07\",\"1955-11-14\",\"1978-10-29\",\"1960-07-02\",\"1979-01-08\",\"1966-05-13\",\"1958-11-08\",\"1965-09-11\",\"1962-07-02\",\"1965-10-21\",\"1981-05-10\",\"1962-08-03\",\"1966-01-24\",\"1973-03-11\",\"1987-05-09\",\"1959-06-01\",\"1962-06-11\",\"1962-05-27\",\"1958-05-10\",\"1978-03-27\",\"1957-01-12\",\"1967-12-13\",\"1959-05-14\",\"1967-07-27\",\"1960-01-29\",\"1975-07-12\",\"1966-07-22\",\"1985-09-18\",\"1975-04-18\",\"1973-05-10\",\"1985-09-16\",\"1960-04-14\",\"1963-02-02\",\"1966-07-27\",\"1970-09-06\",\"1975-04-30\",\"1978-08-11\",\"1960-10-03\",\"1972-01-22\",\"1962-06-13\",\"1958-10-11\",\"1967-07-26\",\"1979-03-21\",\"1957-05-23\",\"1975-12-05\",\"1979-02-07\",\"1983-11-20\",\"1960-03-03\",\"1977-05-02\",\"1964-01-03\",\"1953-08-01\",\"1977-12-21\",\"1970-01-11\",\"1963-08-31\",\"1976-10-08\",\"1971-05-18\",\"1969-08-28\",\"1968-08-15\",\"1968-11-16\",\"1962-04-12\",\"1978-03-01\",\"1971-11-29\",\"1963-12-24\",\"1973-04-10\",\"1989-01-31\",\"1949-09-20\",\"1952-02-13\",\"1981-09-18\",\"1976-05-18\",\"1953-05-25\",\"1961-03-05\",\"1968-07-29\",\"1986-02-20\",\"1984-07-03\",\"1953-01-14\",\"1973-06-28\",\"1971-12-30\",\"1964-06-09\",\"1967-03-27\",\"1989-12-22\",\"1966-05-08\",\"1976-01-20\",\"1970-11-12\",\"1973-04-08\",\"1995-09-13\",\"1968-11-19\",\"1965-11-01\",\"1956-02-10\",\"1951-11-04\",\"1967-03-14\",\"1970-11-16\",\"1965-05-01\",\"1970-01-23\",\"1980-06-02\",\"1952-01-09\",\"1985-10-11\",\"1975-12-18\",\"1982-09-05\",\"1976-05-22\",\"1966-01-22\",\"1983-04-11\",\"1969-09-15\",\"1965-05-01\",\"1992-05-18\",\"1976-04-13\",\"1970-10-08\",\"1975-05-27\",\"1961-01-04\",\"1967-04-07\",\"1956-07-26\",\"1955-07-15\",\"1986-11-06\",\"1988-03-08\",\"1974-09-17\",\"1986-03-30\",\"1962-10-12\",\"1980-05-27\",\"1980-12-29\",\"1951-07-06\",\"1986-06-15\",\"1971-07-04\",\"1977-04-29\",\"1967-09-01\",\"1985-03-16\",\"1968-02-04\",\"1956-11-26\",\"1959-03-12\",\"1983-08-11\",\"1992-11-03\",\"1970-04-17\",\"1975-06-16\",\"1973-04-09\",\"1975-09-02\",\"1969-12-12\",\"1960-11-16\",\"1979-06-26\",\"1970-08-31\",\"1982-12-12\",\"1987-03-19\",\"1989-03-23\",\"1962-11-29\",\"1982-10-05\",\"1985-04-18\",\"1964-11-22\",\"1958-01-08\",\"1950-09-13\",\"1969-07-27\",\"1969-01-16\",\"1954-02-11\",\"1965-05-05\",\"1948-02-03\",\"1968-04-17\",\"1974-11-30\",\"1988-06-29\",\"1963-04-03\",\"1989-12-27\",\"1968-04-11\",\"1982-06-30\",\"1953-09-06\",\"1952-09-24\",\"1984-07-01\",\"1977-03-08\",\"1955-11-11\",\"1984-03-10\",\"1976-06-05\",\"1963-06-10\",\"1972-02-02\",\"1988-04-27\",\"1987-04-06\",\"1969-08-25\",\"1969-03-18\",\"1964-04-29\",\"1986-04-30\",\"1963-09-22\",\"1976-11-28\",\"1982-02-12\",\"1970-12-27\",\"1967-01-22\",\"1966-09-06\",\"1962-07-01\",\"1964-05-22\",\"1950-08-07\",\"1972-08-15\",\"1969-08-21\",\"1974-08-16\",\"1976-01-30\",\"1984-10-14\",\"1960-09-29\",\"1985-06-29\",\"1988-12-25\",\"1963-01-27\",\"1969-09-13\",\"1988-12-23\",\"1972-12-31\",\"1977-02-08\",\"1977-03-03\",\"1967-04-10\",\"1956-02-27\",\"1968-07-01\",\"1968-09-20\",\"1963-04-09\",\"1974-10-06\",\"1964-01-16\",\"1977-07-20\",\"1974-09-11\",\"1975-03-08\",\"1979-10-15\",\"1976-02-12\",\"1972-07-20\",\"1964-04-21\",\"1993-01-14\",\"1972-08-20\",\"1965-04-09\",\"1976-03-08\",\"1968-05-17\",\"1984-09-12\",\"1951-01-28\",\"1976-07-20\",\"1977-06-08\",\"1970-09-04\",\"1989-07-25\",\"1967-04-13\",\"1961-11-26\",\"1960-04-12\",\"1956-12-26\",\"1986-04-06\",\"1966-10-17\",\"1955-07-04\",\"1973-02-28\",\"1949-03-20\",\"1980-01-14\",\"1977-01-27\",\"1964-10-24\",\"1993-10-15\",\"1970-10-08\",\"1979-03-30\",\"1972-11-17\",\"1984-06-15\",\"1958-10-02\",\"1985-05-11\",\"1974-12-17\",\"1973-12-11\",\"1958-01-26\",\"1989-02-26\",\"1953-11-18\",\"1958-02-08\",\"1956-01-29\",\"1962-09-06\",\"1975-09-30\",\"1980-07-14\",\"1979-10-19\",\"1970-09-23\",\"1968-01-20\",\"1966-02-11\",\"1959-12-07\",\"1963-05-08\",\"1984-08-31\",\"1990-02-27\",\"1982-09-10\",\"1986-11-27\",\"1980-06-29\",\"1970-02-26\",\"1969-09-15\",\"1959-07-18\",\"1956-12-03\",\"1967-01-02\",\"1990-08-03\",\"1962-11-02\",\"1977-01-28\",\"1959-11-19\",\"1956-12-08\",\"1971-12-21\",\"1956-06-25\",\"1985-07-09\",\"1972-09-07\",\"1975-12-01\",\"1979-04-17\",\"1979-10-10\",\"1978-12-29\",\"1964-10-19\",\"1977-12-22\",\"1973-10-12\",\"1952-08-23\",\"1966-02-08\",\"1967-10-30\",\"1964-06-01\",\"1944-10-20\",\"1980-10-29\",\"1970-03-10\",\"1991-04-22\",\"1975-07-27\",\"1973-05-14\",\"1958-06-04\",\"1990-01-09\",\"1975-12-20\",\"1958-08-08\",\"1987-10-20\",\"1954-02-03\",\"1976-08-01\",\"1962-06-02\",\"1968-12-02\",\"1967-10-19\",\"1954-05-19\",\"1953-12-14\",\"1980-10-15\",\"1971-04-03\",\"1973-11-08\",\"1977-08-21\",\"1946-07-03\",\"1976-07-08\",\"1973-09-18\",\"1955-10-16\",\"1970-09-11\",\"1975-03-20\",\"1984-04-03\",\"1992-04-14\",\"1976-07-30\",\"1985-02-07\",\"1962-03-08\",\"1955-03-12\",\"1978-02-21\",\"1955-10-30\",\"1961-08-30\",\"1982-05-15\",\"1967-05-09\",\"1962-05-18\",\"1947-10-06\",\"1986-06-18\",\"1988-02-19\",\"1976-02-05\",\"1977-02-18\",\"1991-07-26\",\"1998-02-23\",\"1983-10-24\",\"1965-09-02\",\"1975-04-14\",\"1949-05-20\",\"1976-03-23\",\"1964-02-02\",\"1971-05-27\",\"1973-04-20\",\"1976-01-21\",\"1953-09-24\",\"1989-02-11\",\"1955-06-22\",\"1958-06-05\",\"1973-11-20\",\"1970-01-19\",\"1989-12-26\",\"1975-02-21\",\"1955-02-27\",\"1964-07-08\",\"1947-11-16\",\"1970-03-09\",\"1988-11-22\",\"1969-10-05\",\"1967-08-19\",\"1968-11-10\",\"1966-08-02\",\"1961-12-23\",\"1972-03-22\",\"1978-03-03\",\"1961-02-01\",\"1960-05-15\",\"1968-02-12\",\"1982-12-25\",\"1975-05-25\",\"1969-04-16\",\"1974-06-08\",\"1972-06-05\",\"1983-05-13\",\"1972-11-10\",\"1985-03-26\",\"1986-03-11\",\"1984-06-15\",\"1975-03-19\",\"1963-02-23\",\"1984-05-10\",\"1978-10-09\",\"1990-08-28\",\"1986-08-06\",\"1960-08-13\",\"1966-05-08\",\"1971-12-21\",\"1982-09-20\",\"1976-01-29\",\"1950-06-30\",\"1982-01-03\",\"1970-09-27\",\"1961-09-28\",\"1979-08-06\",\"1963-04-15\",\"1979-04-30\",\"1972-02-08\",\"1978-12-04\",\"1958-04-09\",\"1982-02-16\",\"1974-04-16\",\"1978-02-16\",\"1965-11-01\",\"1967-08-17\",\"1981-06-27\",\"1975-03-11\",\"1987-05-27\",\"1987-06-25\",\"1957-06-12\",\"1956-03-06\",\"1975-01-14\",\"1967-03-06\",\"1984-12-21\",\"1976-06-08\",\"1978-10-27\",\"1989-10-16\",\"1982-12-13\",\"1980-07-17\",\"1983-02-28\",\"1977-11-03\",\"1982-04-18\",\"1970-03-23\",\"1962-10-29\",\"1961-08-17\",\"1963-02-15\",\"1965-09-08\",\"1987-06-11\",\"1955-11-09\",\"1963-03-17\",\"1969-01-23\",\"1957-05-05\",\"1982-11-12\",\"1968-03-12\",\"1962-08-27\",\"1979-06-14\",\"1963-05-09\",\"1961-12-29\",\"1971-03-14\",\"1964-05-27\",\"1974-03-28\",\"1976-05-07\",\"1965-07-06\",\"1971-04-06\",\"1960-06-06\",\"1953-06-21\",\"1957-01-21\",\"1967-03-28\",\"1980-08-21\",\"1986-04-12\",\"1993-06-27\",\"1970-12-03\",\"1973-02-28\",\"1968-12-09\",\"1954-07-25\",\"1963-03-12\",\"1971-03-07\",\"undef\",\"1981-01-16\",\"1967-05-16\",\"1992-09-29\",\"1972-02-08\",\"1975-09-19\",\"1971-10-27\",\"1957-09-13\",\"1968-03-25\",\"1972-12-02\",\"1967-04-17\",\"1964-11-28\",\"1972-07-22\",\"1957-03-19\",\"1974-03-24\",\"1986-12-18\",\"1987-03-30\",\"undef\",\"1967-04-17\",\"1982-05-05\",\"1981-01-01\",\"1964-07-30\",\"1973-03-13\",\"undef\"],\"group\":[\"Verts/ALE\",\"ECR\",\"ECR\",\"ECR\",\"PPE\",\"PPE\",\"S&D\",\"PPE\",\"ECR\",\"PPE\",\"RE\",\"S&D\",\"PPE\",\"RE\",\"PPE\",\"RE\",\"RE\",\"PPE\",\"ECR\",\"PPE\",\"S&D\",\"S&D\",\"PPE\",\"RE\",\"PPE\",\"S&D\",\"PPE\",\"PPE\",\"PPE\",\"RE\",\"PPE\",\"ID\",\"Verts/ALE\",\"S&D\",\"S&D\",\"PPE\",\"PPE\",\"S&D\",\"PPE\",\"RE\",\"RE\",\"S&D\",\"PPE\",\"PPE\",\"PPE\",\"S&D\",\"RE\",\"PPE\",\"PPE\",\"Verts/ALE\",\"GUE/NGL\",\"RE\",\"S&D\",\"S&D\",\"Verts/ALE\",\"ECR\",\"PPE\",\"PPE\",\"ECR\",\"RE\",\"PPE\",\"ECR\",\"S&D\",\"ID\",\"PPE\",\"S&D\",\"PPE\",\"ECR\",\"RE\",\"ECR\",\"PPE\",\"S&D\",\"PPE\",\"PPE\",\"S&D\",\"S&D\",\"RE\",\"PPE\",\"GUE/NGL\",\"Verts/ALE\",\"PPE\",\"PPE\",\"S&D\",\"ID\",\"PPE\",\"Verts/ALE\",\"Verts/ALE\",\"GUE/NGL\",\"ECR\",\"PPE\",\"Verts/ALE\",\"PPE\",\"PPE\",\"S&D\",\"S&D\",\"RE\",\"PPE\",\"GUE/NGL\",\"NA\",\"PPE\",\"ECR\",\"PPE\",\"PPE\",\"GUE/NGL\",\"S&D\",\"PPE\",\"PPE\",\"PPE\",\"Verts/ALE\",\"GUE/NGL\",\"S&D\",\"PPE\",\"PPE\",\"S&D\",\"PPE\",\"RE\",\"ECR\",\"RE\",\"S&D\",\"S&D\",\"Verts/ALE\",\"PPE\",\"S&D\",\"PPE\",\"PPE\",\"PPE\",\"S&D\",\"PPE\",\"PPE\",\"S&D\",\"S&D\",\"PPE\",\"PPE\",\"S&D\",\"PPE\",\"Verts/ALE\",\"Verts/ALE\",\"PPE\",\"PPE\",\"ECR\",\"S&D\",\"RE\",\"PPE\",\"GUE/NGL\",\"PPE\",\"S&D\",\"ID\",\"Verts/ALE\",\"Verts/ALE\",\"NA\",\"RE\",\"PPE\",\"GUE/NGL\",\"ID\",\"GUE/NGL\",\"RE\",\"ID\",\"PPE\",\"PPE\",\"PPE\",\"S&D\",\"GUE/NGL\",\"PPE\",\"S&D\",\"S&D\",\"S&D\",\"PPE\",\"S&D\",\"PPE\",\"PPE\",\"PPE\",\"Verts/ALE\",\"GUE/NGL\",\"ECR\",\"PPE\",\"NA\",\"NA\",\"NA\",\"Verts/ALE\",\"RE\",\"PPE\",\"ID\",\"S&D\",\"Verts/ALE\",\"GUE/NGL\",\"RE\",\"PPE\",\"S&D\",\"S&D\",\"ECR\",\"PPE\",\"S&D\",\"RE\",\"PPE\",\"NA\",\"RE\",\"ID\",\"PPE\",\"PPE\",\"S&D\",\"PPE\",\"ID\",\"PPE\",\"PPE\",\"PPE\",\"S&D\",\"RE\",\"PPE\",\"S&D\",\"PPE\",\"RE\",\"RE\",\"PPE\",\"S&D\",\"ECR\",\"ECR\",\"S&D\",\"S&D\",\"PPE\",\"Verts/ALE\",\"PPE\",\"S&D\",\"PPE\",\"PPE\",\"PPE\",\"RE\",\"GUE/NGL\",\"PPE\",\"S&D\",\"Verts/ALE\",\"NA\",\"S&D\",\"S&D\",\"ECR\",\"ID\",\"PPE\",\"PPE\",\"PPE\",\"S&D\",\"S&D\",\"S&D\",\"PPE\",\"Verts/ALE\",\"PPE\",\"S&D\",\"S&D\",\"ECR\",\"NA\",\"ECR\",\"PPE\",\"RE\",\"Verts/ALE\",\"S&D\",\"S&D\",\"ID\",\"NA\",\"NA\",\"GUE/NGL\",\"RE\",\"S&D\",\"PPE\",\"PPE\",\"PPE\",\"RE\",\"PPE\",\"RE\",\"GUE/NGL\",\"PPE\",\"ID\",\"PPE\",\"ECR\",\"ID\",\"S&D\",\"S&D\",\"NA\",\"S&D\",\"PPE\",\"S&D\",\"ID\",\"ID\",\"PPE\",\"PPE\",\"Verts/ALE\",\"PPE\",\"ECR\",\"S&D\",\"PPE\",\"PPE\",\"PPE\",\"S&D\",\"ID\",\"PPE\",\"S&D\",\"ECR\",\"PPE\",\"RE\",\"RE\",\"PPE\",\"S&D\",\"ID\",\"Verts/ALE\",\"ID\",\"S&D\",\"RE\",\"PPE\",\"GUE/NGL\",\"PPE\",\"GUE/NGL\",\"S&D\",\"RE\",\"ID\",\"S&D\",\"ID\",\"S&D\",\"GUE/NGL\",\"S&D\",\"PPE\",\"ID\",\"RE\",\"ID\",\"RE\",\"ID\",\"S&D\",\"PPE\",\"S&D\",\"PPE\",\"PPE\",\"ID\",\"PPE\",\"PPE\",\"S&D\",\"PPE\",\"S&D\",\"RE\",\"PPE\",\"S&D\",\"Verts/ALE\",\"PPE\",\"ID\",\"Verts/ALE\",\"Verts/ALE\",\"PPE\",\"GUE/NGL\",\"ID\",\"ID\",\"GUE/NGL\",\"ECR\",\"RE\",\"RE\",\"Verts/ALE\",\"S&D\",\"Verts/ALE\",\"ECR\",\"ID\",\"RE\",\"ID\",\"S&D\",\"NA\",\"ECR\",\"S&D\",\"ID\",\"RE\",\"Verts/ALE\",\"ID\",\"ID\",\"Verts/ALE\",\"ID\",\"S&D\",\"RE\",\"GUE/NGL\",\"S&D\",\"RE\",\"RE\",\"S&D\",\"RE\",\"S&D\",\"S&D\",\"PPE\",\"ID\",\"ID\",\"Verts/ALE\",\"RE\",\"Verts/ALE\",\"S&D\",\"GUE/NGL\",\"S&D\",\"ID\",\"ID\",\"RE\",\"Verts/ALE\",\"ID\",\"GUE/NGL\",\"Verts/ALE\",\"Verts/ALE\",\"S&D\",\"PPE\",\"RE\",\"ID\",\"ID\",\"PPE\",\"PPE\",\"S&D\",\"ECR\",\"RE\",\"PPE\",\"PPE\",\"RE\",\"ID\",\"ECR\",\"PPE\",\"RE\",\"PPE\",\"PPE\",\"PPE\",\"Verts/ALE\",\"S&D\",\"S&D\",\"NA\",\"RE\",\"S&D\",\"RE\",\"ID\",\"S&D\",\"S&D\",\"RE\",\"ID\",\"Verts/ALE\",\"NA\",\"GUE/NGL\",\"GUE/NGL\",\"ECR\",\"RE\",\"NA\",\"RE\",\"S&D\",\"S&D\",\"S&D\",\"ID\",\"Verts/ALE\",\"ID\",\"RE\",\"RE\",\"S&D\",\"Verts/ALE\",\"RE\",\"GUE/NGL\",\"NA\",\"Verts/ALE\",\"RE\",\"ID\",\"PPE\",\"ID\",\"PPE\",\"RE\",\"S&D\",\"S&D\",\"PPE\",\"Verts/ALE\",\"RE\",\"RE\",\"Verts/ALE\",\"S&D\",\"S&D\",\"ID\",\"RE\",\"S&D\",\"Verts/ALE\",\"ECR\",\"PPE\",\"ID\",\"PPE\",\"RE\",\"ECR\",\"ECR\",\"ID\",\"S&D\",\"PPE\",\"ECR\",\"RE\",\"RE\",\"RE\",\"ECR\",\"GUE/NGL\",\"ECR\",\"RE\",\"ID\",\"S&D\",\"PPE\",\"Verts/ALE\",\"GUE/NGL\",\"NA\",\"NA\",\"PPE\",\"ECR\",\"RE\",\"GUE/NGL\",\"ID\",\"ECR\",\"PPE\",\"Verts/ALE\",\"ID\",\"PPE\",\"NA\",\"Verts/ALE\",\"S&D\",\"Verts/ALE\",\"ID\",\"S&D\",\"ID\",\"PPE\",\"S&D\",\"ID\",\"ID\",\"RE\",\"PPE\",\"S&D\",\"PPE\",\"ID\",\"S&D\",\"S&D\",\"PPE\",\"S&D\",\"S&D\",\"ID\",\"Verts/ALE\",\"S&D\",\"S&D\",\"S&D\",\"RE\",\"ECR\",\"PPE\",\"PPE\",\"RE\",\"ECR\",\"S&D\",\"PPE\",\"S&D\",\"GUE/NGL\",\"PPE\",\"PPE\",\"PPE\",\"ECR\",\"Verts/ALE\",\"Verts/ALE\",\"Verts/ALE\",\"NA\",\"Verts/ALE\",\"PPE\",\"RE\",\"S&D\",\"ID\",\"ID\",\"Verts/ALE\",\"PPE\",\"RE\",\"Verts/ALE\",\"S&D\",\"GUE/NGL\",\"GUE/NGL\",\"PPE\",\"Verts/ALE\",\"NA\",\"GUE/NGL\",\"ID\",\"S&D\",\"RE\",\"S&D\",\"PPE\",\"PPE\",\"ECR\",\"NA\",\"RE\",\"ECR\",\"ID\",\"GUE/NGL\",\"ID\",\"PPE\",\"Verts/ALE\",\"ID\",\"ID\",\"S&D\",\"GUE/NGL\",\"S&D\",\"ECR\",\"NA\",\"Verts/ALE\",\"ECR\",\"ID\",\"ECR\",\"S&D\",\"ECR\",\"S&D\",\"S&D\",\"ID\",\"Verts/ALE\",\"S&D\",\"PPE\",\"PPE\",\"RE\",\"PPE\",\"RE\",\"Verts/ALE\",\"RE\",\"S&D\",\"PPE\",\"RE\",\"PPE\",\"NA\",\"PPE\",\"ECR\",\"S&D\",\"RE\",\"PPE\",\"S&D\",\"ECR\",\"RE\",\"ECR\",\"Verts/ALE\",\"RE\",\"ECR\",\"ID\",\"S&D\",\"ECR\",\"ECR\",\"PPE\",\"S&D\",\"PPE\",\"ECR\",\"RE\",\"PPE\",\"PPE\",\"Verts/ALE\",\"ID\",\"RE\",\"PPE\",\"RE\",\"S&D\",\"NA\",\"S&D\",\"ID\",\"Verts/ALE\",\"RE\",\"GUE/NGL\",\"GUE/NGL\",\"PPE\",\"S&D\",\"Verts/ALE\",\"S&D\",\"ECR\",\"ID\",\"ECR\",\"PPE\",\"GUE/NGL\",\"PPE\",\"PPE\",\"ECR\",\"ECR\",\"PPE\",\"Verts/ALE\",\"PPE\",\"PPE\",\"PPE\",\"Verts/ALE\",\"S&D\",\"RE\",\"RE\",\"ECR\",\"ID\",\"PPE\",\"ID\",\"PPE\",\"S&D\",\"RE\",\"S&D\",\"ECR\",\"S&D\",\"S&D\",\"PPE\",\"PPE\",\"S&D\",\"NA\",\"NA\",\"PPE\",\"RE\",\"Verts/ALE\",\"RE\",\"ECR\",\"PPE\",\"Verts/ALE\",\"RE\",\"PPE\",\"ID\",\"S&D\",\"S&D\",\"NA\",\"S&D\",\"ID\",\"RE\",\"ECR\",\"PPE\",\"RE\",\"RE\",\"NA\",\"GUE/NGL\",\"Verts/ALE\"],\"mepid\":[96750,4746,23788,96810,96808,4560,38595,1992,125106,4391,124696,28347,28294,4344,124586,22858,96711,96867,97133,96830,33997,124822,185341,190519,125030,4267,4289,38398,96761,96709,188945,190518,183338,124799,124837,4246,28224,124747,96791,124872,114268,124852,23821,125104,96779,96891,130100,124809,189525,190464,190517,191693,192634,96837,96730,23712,2323,96776,96796,58789,124806,28389,1909,125025,28288,125020,124802,28615,96698,96697,96756,23768,28617,124701,124836,1854,125128,28390,131507,185974,190774,28141,185619,192635,190713,96752,96648,125023,124877,124713,96739,96809,28223,124705,124735,124700,112611,23699,124835,124808,28297,96934,96829,96852,125021,33982,28269,124704,96868,120478,37229,24594,39725,96833,125706,840,96801,124709,96911,96844,124934,96936,124867,28219,23781,96747,96864,96933,125027,1913,37312,40599,2341,124739,124734,28619,125214,124726,125067,124884,5729,124862,107212,130833,96787,124991,189065,193273,193292,124856,125005,125068,96706,97198,96820,129073,124780,124929,124828,96903,125109,28586,96978,125042,88882,29579,36392,124970,2187,23816,5565,28161,30482,28372,24922,124833,124844,124777,124972,124821,124895,38511,124722,96734,124992,124989,118859,125043,124861,96713,95074,124936,28266,72779,124834,96885,124765,28226,1927,124814,1917,183793,193419,96668,124850,96812,124766,98341,28298,125065,125038,97058,124710,124692,124996,124891,28340,124781,28400,96743,28229,112744,96772,28399,125063,96922,96646,28115,124785,2054,125237,124784,125046,124887,124973,125064,96780,96811,124846,96880,96998,125670,103381,124988,96952,124691,119431,124831,28353,97968,4253,96740,96932,96991,125001,124812,125093,24505,124866,113892,125004,96826,28150,124708,124712,124693,124985,124715,124738,96899,124873,124770,96842,125110,124779,96681,124714,125045,124771,124760,125012,26837,96725,124807,4465,23868,28122,96771,38420,112748,197826,197490,197403,198096,197836,197848,197400,197746,197783,197475,197448,197691,197587,197664,197492,197701,197695,197533,197651,197781,197789,197495,131580,197433,197684,197808,197671,197610,197779,132191,197437,197680,197496,197534,197658,197679,197408,197478,197778,197410,197396,197648,197498,197551,197771,197435,197512,197637,197564,197449,197439,197636,197521,197788,101039,187917,197467,197668,197577,197431,197446,197470,197501,182995,197576,128483,197440,197434,197829,197617,35016,126644,197574,197797,197796,86793,197786,197641,197505,197529,197782,197463,197558,197507,197631,197657,197761,197536,197683,197616,197503,197588,197654,197394,197731,38542,197608,197556,197504,197531,197472,197468,197453,197471,197579,197473,197595,197822,197614,197510,99945,198329,197766,197430,197535,197649,197589,197480,197607,197720,197419,197414,197513,197455,106936,197391,101585,197795,197555,197702,197632,197582,197717,197742,197554,197628,183916,197794,197416,197819,197436,197661,197804,197443,197694,197728,197718,197799,197549,94649,197557,197452,197618,197645,197543,88715,198063,197457,197444,198176,197514,197596,197646,135511,197682,197800,197412,197459,197526,197770,197398,122978,197846,197594,197624,197392,197837,197516,197517,197627,197840,197447,197518,197767,197626,197491,197839,197469,197585,197401,197818,197519,197415,197520,197528,197570,197523,197406,197546,197743,197438,197740,197525,197530,197445,197699,197481,197532,197843,197395,197482,197692,197737,197460,197697,197461,197597,197698,197686,197393,197635,197483,197611,197494,197777,197721,197458,197493,197719,197592,197835,197735,197653,197623,197462,197638,197634,197441,197522,197538,197841,197662,197567,130256,197497,197824,197540,197805,197711,197427,197647,197541,197464,197465,197802,197734,197889,197542,197432,197838,197687,99283,197466,197420,197563,197539,197845,197527,197754,197738,197573,197619,197828,197629,197590,197663,197732,197404,197765,197820,197764,197868,197544,197790,197681,197488,197413,197832,197787,197615,197801,197785,197584,197776,197792,197506,197709,197690,197773,127096,197545,197722,197650,197578,197500,197670,197656,197422,197869,197425,197508,197423,197418,197677,197548,103746,197426,197935,197390,197849,197791,197784,197417,197550,197825,58766,197399,197772,134605,197553,197806,197756,197655,197831,197667,197591,197402,197559,197547,197672,27714,97236,197580,197593,197894,197665,198183,197763,197810,185771,197870,197502,197827,197571,98582,197844,197451,197678,197537,197798,197552,197863,197817,197429,197405,197566,123562,197515,197675,197769,197652,197421,197511,197842,197581,197499,197572,197586,197606,197489,197621,34578,118949,5392,198490,199941,199996,202036,202112,202073,202352,202351,204368,204332,204335,204416,204414,204333,204420,204419,204336,204421,112747,204418,204443,204413,204334,204331,204346,204449,204400,197780,204733,205452,206158],\"name\":[\"Fran\\u00e7ois Alfonsi\",\"Sergio Berlato\",\"Adam Bielan\",\"Carlo Fidanza\",\"Pablo Arias Echeverr\\u00eda\",\"Antonius Manders\",\"Rovana Plumb\",\"Jos\\u00e9 Manuel Garc\\u00eda-Margallo Y Marfil\",\"Johan Van Overtveldt\",\"Silvio Berlusconi\",\"Andrus Ansip\",\"Javier Moreno S\\u00e1nchez\",\"Ljudmila Novak\",\"Mar\\u00eda Soraya Rodr\\u00edguez Ramos\",\"Bal\\u00e1zs Hidv\\u00e9ghi\",\"Fabienne Keller\",\"Pascal Canfin\",\"Maria Da Gra\\u00e7a Carvalho\",\"Derk Jan Eppink\",\"Enik\\u0151 Gy\\u0151ri\",\"Corina Cre\\u021bu\",\"Dietmar K\\u00f6ster\",\"\\u017deljana Zovko\",\"Caroline Nagtegaal\",\"Annie Schreijer-Pierik\",\"Udo Bullmann\",\"Angelika Niebler\",\"Esther De Lange\",\"Axel Voss\",\"Morten L\\u00f8kkegaard\",\"Dennis Radtke\",\"J\\u00f6rg Meuthen\",\"Jakop G. Dalunde\",\"Alessandra Moretti\",\"Joachim Schuster\",\"Othmar Karas\",\"Markus Pieper\",\"Pedro Silva Pereira\",\"El\\u017cbieta Katarzyna \\u0141ukacijewska\",\"Morten Petersen\",\"Nils Torvalds\",\"Sergei Stanishev\",\"J\\u00f3zsef Sz\\u00e1jer\",\"Romana Tomc\",\"Danuta Maria H\\u00fcbner\",\"Paolo De Castro\",\"Hilde Vautmans\",\"Sven Schulze\",\"Asim Ademov\",\"Thomas Waitz\",\"Martin Schirdewan\",\"Elsi Katainen\",\"Giuseppe Ferrandino\",\"Petra Kammerevert\",\"Sven Giegold\",\"Jan Zahradil\",\"Rainer Wieland\",\"R\\u00f3\\u017ca Thun Und Hohenstein\",\"Ryszard Antoni Legutko\",\"Jan Huitema\",\"David Mcallister\",\"Zbigniew Ku\\u017amiuk\",\"Bernd Lange\",\"Marcel De Graaff\",\"Jan Olbrycht\",\"Paul Tang\",\"Siegfried Mure\\u015fan\",\"Roberts Z\\u012ble\",\"Viktor Uspaskich\",\"Valdemar Toma\\u0161evski\",\"Sabine Verheyen\",\"Bogus\\u0142aw Liberadzki\",\"Inese Vaidere\",\"Lud\\u011bk Niedermayer\",\"Maria Noichl\",\"Constanze Krehl\",\"Iskra Mihaylova\",\"Pilar Del Castillo Vera\",\"Miguel Urb\\u00e1n Crespo\",\"Jordi Sol\\u00e9\",\"Geoffroy Didier\",\"L\\u00edvia J\\u00e1r\\u00f3ka\",\"Tiemo W\\u00f6lken\",\"Danilo Oscar Lancini\",\"Lukas Mandl\",\"Martin H\\u00e4usling\",\"Philippe Lamberts\",\"Anja Hazekamp\",\"Jadwiga Wi\\u015bniewska\",\"Tom\\u00e1\\u0161 Zdechovsk\\u00fd\",\"Reinhard B\\u00fctikofer\",\"Peter Van Dalen\",\"Andreas Schwab\",\"Istv\\u00e1n Ujhelyi\",\"Miapetra Kumpula-Natri\",\"Yana Toom\",\"Petri Sarvamaa\",\"Kate\\u0159ina Kone\\u010dn\\u00e1\",\"Rosa D'Amato\",\"Norbert Lins\",\"Jacek Saryusz-Wolski\",\"Sandra Kalniete\",\"\\u00c1d\\u00e1m K\\u00f3sa\",\"Cornelia Ernst\",\"Agnes Jongerius\",\"Marian-Jean Marinescu\",\"Jerzy Buzek\",\"Stanislav Pol\\u010d\\u00e1k\",\"Karima Delli\",\"Martina Michels\",\"Kati Piri\",\"Anne Sander\",\"Iuliu Winkler\",\"Jens Geier\",\"Ji\\u0159\\u00ed Posp\\u00ed\\u0161il\",\"Charles Goerens\",\"Tomasz Piotr Por\\u0119ba\",\"Martina Dlabajov\\u00e1\",\"Tanja Fajon\",\"Norbert Neuser\",\"Monika Vana\",\"Gabriel Mato\",\"Brando Benifei\",\"Daniel Caspary\",\"Janusz Lewandowski\",\"Arnaud Danjean\",\"David Maria Sassoli\",\"Milan Zver\",\"Esteban Gonz\\u00e1lez Pons\",\"Evelyne Gebhardt\",\"Christel Schaldemose\",\"Sirpa Pietik\\u00e4inen\",\"Michael Gahler\",\"Carlos Zorrinho\",\"Cl\\u00e1udia Monteiro De Aguiar\",\"Tatjana \\u017ddanoka\",\"Bronis Rop\\u0117\",\"Henna Virkkunen\",\"Theodoros Zagorakis\",\"Kosma Z\\u0142otowski\",\"Kathleen Van Brempt\",\"Ulrike M\\u00fcller\",\"Andrey Novakov\",\"Stelios Kouloglou\",\"Herbert Dorfmann\",\"Jytte Guteland\",\"France Jamet\",\"Romeo Franz\",\"Tilly Metz\",\"Ignazio Corrao\",\"Javier Nart\",\"Manolis Kefalogiannis\",\"Jo\\u00e3o Ferreira\",\"Mara Bizzotto\",\"Marisa Matias\",\"Urmas Paet\",\"Marco Zanni\",\"Ivan \\u0160tefanec\",\"Fulvio Martusciello\",\"Paulo Rangel\",\"Eva Kaili\",\"Dimitrios Papadimoulis\",\"Nuno Melo\",\"Javi L\\u00f3pez\",\"Victor Negrescu\",\"Marc Tarabella\",\"Aldo Patriciello\",\"Miriam Dalli\",\"Antonio Tajani\",\"Andr\\u00e1s Gy\\u00fcrk\",\"Brice Hortefeux\",\"Margrete Auken\",\"Younous Omarjee\",\"Ryszard Czarnecki\",\"Pascal Arimont\",\"Laura Ferrara\",\"Piernicola Pedicini\",\"Tiziana Beghin\",\"Ernest Urtasun\",\"Nicola Danti\",\"Krzysztof Hetman\",\"Georg Mayer\",\"Csaba Moln\\u00e1r\",\"Ska Keller\",\"Malin Bj\\u00f6rk\",\"Fredrick Federley\",\"Roberta Metsola\",\"Inma Rodr\\u00edguez-Pi\\u00f1ero\",\"Caterina Chinnici\",\"Ev\\u017een To\\u0161enovsk\\u00fd\",\"Jeroen Lenaers\",\"Maria Arena\",\"Sophia In 'T Veld\",\"Nadine Morano\",\"Martin Sonneborn\",\"Dominique Riquet\",\"Jo\\u00eblle M\\u00e9lin\",\"Christian Ehler\",\"Peter Liese\",\"Simona Bonaf\\u00e8\",\"Markus Ferber\",\"Angelo Ciocca\",\"Christophe Hansen\",\"Se\\u00e1n Kelly\",\"Emil Radev\",\"Juan Fernando L\\u00f3pez Aguilar\",\"Petras Au\\u0161trevi\\u010dius\",\"Eva Maydell\",\"Iratxe Garc\\u00eda P\\u00e9rez\",\"Elissavet Vozemberg-Vrionidi\",\"Maite Pagazaurtund\\u00faa\",\"Guy Verhofstadt\",\"Michaela \\u0160ojdrov\\u00e1\",\"Demetris Papadakis\",\"Peter Lundgren\",\"Zdzis\\u0142aw Krasnod\\u0119bski\",\"Patrizia Toia\",\"Alfred Sant\",\"Francisco Jos\\u00e9 Mill\\u00e1n Mon\",\"Mich\\u00e8le Rivasi\",\"Manfred Weber\",\"Tonino Picula\",\"Peter Jahr\",\"Antonio L\\u00f3pez-Ist\\u00fariz White\",\"Georgios Kyrtsos\",\"Izaskun Bilbao Barandica\",\"Helmut Scholz\",\"Mairead Mcguinness\",\"Maria Grapini\",\"Heidi Hautala\",\"Marco Zullo\",\"Dan Nica\",\"Jon\\u00e1s Fern\\u00e1ndez\",\"Karol Karski\",\"Gerolf Annemans\",\"Maria Spyraki\",\"Monika Hohlmeier\",\"Rosa Estar\\u00e0s Ferragut\",\"Pina Picierno\",\"Andrea Cozzolino\",\"Evelyn Regner\",\"Massimiliano Salini\",\"Terry Reintke\",\"Deirdre Clune\",\"Sylvie Guillaume\",\"Costas Mavrides\",\"Ru\\u017ea Toma\\u0161i\\u0107\",\"Isabella Adinolfi\",\"Anna Fotyga\",\"Andrey Kovatchev\",\"Fr\\u00e9d\\u00e9rique Ries\",\"Yannick Jadot\",\"Birgit Sippel\",\"Eider Gardiazabal Rubial\",\"Harald Vilimsky\",\"Fabio Massimo Castaldo\",\"Kostas Papadakis\",\"Emmanuel Maurel\",\"Ilhan Kyuchyuk\",\"Eric Andrieu\",\"Franc Bogovi\\u010d\",\"Tam\\u00e1s Deutsch\",\"Kinga G\\u00e1l\",\"Dita Charanzov\\u00e1\",\"Andrea Bocskor\",\"Pascal Durand\",\"Luke Ming Flanagan\",\"Gy\\u00f6rgy H\\u00f6lv\\u00e9nyi\",\"Gilles Lebreton\",\"Jos\\u00e9 Manuel Fernandes\",\"Angel Dzhambazki\",\"Jean-Fran\\u00e7ois Jalkh\",\"Ismail Ertug\",\"Nikos Androulakis\",\"Eleonora Evi\",\"Vilija Blinkevi\\u010di\\u016bt\\u0117\",\"Andor Deli\",\"Clara Aguilera\",\"Dominique Bilde\",\"Nicolas Bay\",\"Daniel Buda\",\"Lefteris Christoforou\",\"Bas Eickhout\",\"Jens Gieseke\",\"Raffaele Fitto\",\"Monika Be\\u0148ov\\u00e1\",\"David Casa\",\"Jaros\\u0142aw Kalinowski\",\"Cristian-Silviu Bu\\u015foi\",\"Biljana Borzan\",\"Matteo Adinolfi\",\"Magdalena Adamowicz\",\"Alex Agius Saliba\",\"Mazaly Aguilar\",\"Alexander Alexandrov Yordanov\",\"Atidzhe Alieva-Veli\",\"Abir Al-Sahlani\",\"\\u00c1lvaro Amaro\",\"Andris Ameriks\",\"Christine Anderson\",\"Rasmus Andresen\",\"Mathilde Androu\\u00ebt\",\"Attila Ara-Kov\\u00e1cs\",\"Clotilde Armand\",\"Bartosz Ar\\u0142ukowicz\",\"Konstantinos Arvanitis\",\"Anna-Michelle Asimakopoulou\",\"Manon Aubry\",\"Carmen Avram\",\"Malik Azmani\",\"Simona Baldassarre\",\"Marek Pawe\\u0142 Balt\",\"Jordan Bardella\",\"Katarina Barley\",\"Pernando Barrena Arza\",\"Pietro Bartolo\",\"Traian B\\u0103sescu\",\"Alessandra Basso\",\"Jos\\u00e9 Ram\\u00f3n Bauz\\u00e1 D\\u00edaz\",\"Gunnar Beck\",\"Nicola Beer\",\"Aurelia Beigneux\",\"Marek Belka\",\"Fran\\u00e7ois-Xavier Bellamy\",\"Adrian-Drago\\u015f Benea\",\"Isabel Benjumea Benjumea\",\"Hildegard Bentele\",\"Lars Patrick Berg\",\"Tom Berendsen\",\"Stefan Berger\",\"Erik Bergkvist\",\"Alexander Bernhuber\",\"Robert Biedro\\u0144\",\"St\\u00e9phane Bijoux\",\"Vladim\\u00edr Bil\\u010d\\u00edk\",\"Gabriele Bischoff\",\"Beno\\u00eet Biteau\",\"Vasile Blaga\",\"Hynek Bla\\u0161ko\",\"Michael Bloss\",\"Damian Boeselager\",\"Ioan-Rare\\u015f Bogdan\",\"Manuel Bompard\",\"Anna Bonfrisco\",\"Paolo Borchia\",\"Marc Botenga\",\"Geert Bourgeois\",\"Vlad-Marius Boto\\u015f\",\"Gilles Boyer\",\"Patrick Breyer\",\"Milan Brglez\",\"Saskia Bricmont\",\"Joachim Stanis\\u0142aw Brudzi\\u0144ski\",\"Annika Bruna\",\"Sylvie Brunet\",\"Markus Buchheit\",\"Delara Burkhardt\",\"Martin Buschmann\",\"Jorge Buxad\\u00e9 Villalba\",\"Carlo Calenda\",\"Marco Campomenosi\",\"Jordi Ca\\u00f1as\",\"Damien Car\\u00eame\",\"Andrea Caroppo\",\"Massimo Casanova\",\"Anna Cavazzini\",\"Susanna Ceccardi\",\"Sara Cerdas\",\"Catherine Chabaud\",\"Leila Chaibi\",\"Mohammed Chahim\",\"Olivier Chastel\",\"Asger Christensen\",\"W\\u0142odzimierz Cimoszewicz\",\"Dacian Ciolo\\u015f\",\"Tudor Ciuhodaru\",\"Miroslav \\u010c\\u00ed\\u017e\",\"Nathalie Colin-Oesterl\\u00e9\",\"Gilbert Collard\",\"Rosanna Conte\",\"David Cormand\",\"Katalin Cseh\",\"Ciar\\u00e1n Cuffe\",\"Josianne Cutajar\",\"Clare Daly\",\"Johan Danielsson\",\"Gianantonio Da Re\",\"Ivan David\",\"J\\u00e9r\\u00e9my Decerle\",\"Gwendoline Delbos-Corfield\",\"Filip De Man\",\"\\u00d6zlem Demirel\",\"Anna Deparnay-Grunenberg\",\"Petra De Sutter\",\"Kl\\u00e1ra Dobrev\",\"Christian Doleschal\",\"Anna J\\u00falia Don\\u00e1th\",\"Francesca Donato\",\"Marco Dreosto\",\"Jaros\\u0142aw Duda\",\"Lena D\\u00fcpont\",\"Estrella Dur\\u00e1 Ferrandis\",\"Lucia \\u010euri\\u0161 Nicholsonov\\u00e1\",\"Engin Eroglu\",\"Agn\\u00e8s Evren\",\"Gheorghe Falc\\u0103\",\"Laurence Farreng\",\"Nicolaus Fest\",\"Pietro Fiocchi\",\"Frances Fitzgerald\",\"Valter Flego\",\"Loucas Fourlas\",\"Tomasz Frankowski\",\"Cindy Franssen\",\"Daniel Freund\",\"Hel\\u00e9ne Fritzon\",\"Niels Fuglsang\",\"Mario Furore\",\"S\\u00f8ren Gade\",\"Lina G\\u00e1lvez Mu\\u00f1oz\",\"Claudia Gamon\",\"Gianna Gancia\",\"Ib\\u00e1n Garc\\u00eda Del Blanco\",\"Isabel Garc\\u00eda Mu\\u00f1oz\",\"Luis Garicano\",\"Jean-Paul Garraud\",\"Alexandra Geese\",\"Chiara Gemma\",\"Giorgos Georgiou\",\"Alexis Georgoulis\",\"Helmut Geuking\",\"Cristian Ghinea\",\"Dino Giarrusso\",\"Andreas Gl\\u00fcck\",\"Rapha\\u00ebl Glucksmann\",\"M\\u00f3nica Silvana Gonz\\u00e1lez\",\"Nicol\\u00e1s Gonz\\u00e1lez Casares\",\"Valentino Grant\",\"Mark\\u00e9ta Gregorov\\u00e1\",\"Catherine Griset\",\"Christophe Grudler\",\"Klemen Gro\\u0161elj\",\"Elisabetta Gualmini\",\"Francisco Guerreiro\",\"Bernard Guetta\",\"Jos\\u00e9 Gusm\\u00e3o\",\"M\\u00e1rton Gy\\u00f6ngy\\u00f6si\",\"Henrike Hahn\",\"Svenja Hahn\",\"Roman Haider\",\"Andrzej Halicki\",\"Teuvo Hakkarainen\",\"Mircea-Gheorghe Hava\",\"Val\\u00e9rie Hayer\",\"Hannes Heide\",\"Eero Hein\\u00e4luoma\",\"Niclas Herbst\",\"Pierrette Herzberger-Fofana\",\"Martin Hlav\\u00e1\\u010dek\",\"Martin Hojs\\u00edk\",\"P\\u00e4r Holmgren\",\"Alicia Homs Ginel\",\"Ivo Hristov\",\"Laura Huhtasaari\",\"Ivars Ijabs\",\"Evin Incir\",\"Stasys Jakeli\\u016bnas\",\"Patryk Jaki\",\"Adam Jarubas\",\"Virginie Joron\",\"Rasa Juknevi\\u010dien\\u0117\",\"Irena Joveva\",\"Krzysztof Jurgiel\",\"Eugen Jurzyca\",\"Herve Juvin\",\"Marina Kaljurand\",\"Radan Kanev\",\"Assita Kanko\",\"Pierre Karleskind\",\"Karin Karlsbro\",\"Billy Kelleher\",\"Beata Kempa\",\"Niyazi Kizily\\u00fcrek\",\"Izabela-Helena Kloc\",\"Ond\\u0159ej Knotek\",\"Peter Kofod\",\"\\u0141ukasz Kohut\",\"Arba Kokalari\",\"Marcel Kolaja\",\"Petros Kokkalis\",\"Mislav Kolaku\\u0161i\\u0107\",\"Athanasios Konstantinou\",\"Ewa Kopacz\",\"Joanna Kopci\\u0144ska\",\"Moritz K\\u00f6rner\",\"Elena Kountoura\",\"Maximilian Krah\",\"El\\u017cbieta Kruk\",\"Andrius Kubilius\",\"Alice Kuhnke\",\"Joachim Kuhs\",\"Stelios Kympouropoulos\",\"Ioannis Lagos\",\"Sergey Lagodinsky\",\"Aurore Lalucq\",\"Katrin Langensiepen\",\"H\\u00e9l\\u00e8ne Laporte\",\"Pierre Larrouturou\",\"Julie Lechanteux\",\"David Lega\",\"Maria-Manuel Leit\\u00e3o-Marques\",\"Sylvia Limmer\",\"Elena Lizzi\",\"Nathalie Loiseau\",\"Leopoldo L\\u00f3pez Gil\",\"C\\u00e9sar Luena\",\"Beno\\u00eet Lutgen\",\"Jaak Madison\",\"Cristina Maestre Mart\\u00edn De Almagro\",\"Pierfrancesco Majorino\",\"Au\\u0161ra Maldeikien\\u0117\",\"Adriana Maldonado L\\u00f3pez\",\"Claudiu Manda\",\"Thierry Mariani\",\"Erik Marquardt\",\"Margarida Marques\",\"Pedro Marques\",\"Predrag Fred Mati\\u0107\",\"Radka Maxov\\u00e1\",\"Beata Mazurek\",\"Liudas Ma\\u017eylis\",\"Vangelis Meimarakis\",\"Karen Melchior\",\"Dace Melb\\u0101rde\",\"Sven Mikser\",\"Giuseppe Milazzo\",\"Leszek Miller\",\"Silvia Modig\",\"Dolors Montserrat\",\"Marlene Mortler\",\"Dan-\\u0218tefan Motreanu\",\"And\\u017celika Anna Mo\\u017cd\\u017canowska\",\"Hannah Neumann\",\"Niklas Nienass\",\"Ville Niinist\\u00f6\",\"Lefteris Nikolaou-Alavanos\",\"Grace O'Sullivan\",\"Janina Ochojska\",\"Jan-Christoph Oetjen\",\"Juozas Olekas\",\"Philippe Olivier\",\"Alessandro Panza\",\"Jutta Paulus\",\"Kris Peeters\",\"Mauri Pekkarinen\",\"Mikul\\u00e1\\u0161 Peksa\",\"Tsvetelina Penkova\",\"Anne-Sophie Pelletier\",\"Sandra Pereira\",\"L\\u00eddia Pereira\",\"Kira Marie Peter-Hansen\",\"Sabrina Pignedoli\",\"Manu Pineda\",\"Maxette Pirbakas\",\"Giuliano Pisapia\",\"Drago\\u0219 P\\u00eeslaru\",\"Manuel Pizarro\",\"Jessica Polfj\\u00e4rd\",\"Peter Poll\\u00e1k\",\"Nicola Procaccini\",\"Miroslav Rada\\u010dovsk\\u00fd\",\"Samira Rafaela\",\"El\\u017cbieta Rafalska\",\"Luisa Regimenti\",\"Sira Rego\",\"Guido Reil\",\"Karlo Ressler\",\"Diana Riba I Giner\",\"Antonio Maria Rinaldi\",\"J\\u00e9r\\u00f4me Rivi\\u00e8re\",\"Franco Roberti\",\"Eugenia Rodr\\u00edguez Palop\",\"S\\u00e1ndor R\\u00f3nai\",\"Rob Rooken\",\"Daniela Rondinelli\",\"Caroline Roose\",\"Robert Roos\",\"Andr\\u00e9 Roug\\u00e9\",\"Bert-Jan Ruissen\",\"Dom\\u00e8nec Ruiz Devesa\",\"Bogdan Rzo\\u0144ca\",\"Nacho S\\u00e1nchez Amor\",\"Isabel Santos\",\"Silvia Sardone\",\"Mounir Satouri\",\"Andreas Schieder\",\"Simone Schmiedtbauer\",\"Christine Schneider\",\"Liesje Schreinemacher\",\"Ralf Seekatz\",\"St\\u00e9phane S\\u00e9journ\\u00e9\",\"Nico Semsrott\",\"Monica Semedo\",\"G\\u00fcnther Sidl\",\"Rados\\u0142aw Sikorski\",\"Michal \\u0160ime\\u010dka\",\"Sven Simon\",\"Ivan Vilibor Sin\\u010di\\u0107\",\"Sara Skyttedal\",\"Andrey Slabakov\",\"Massimiliano Smeriglio\",\"Susana Sol\\u00eds P\\u00e9rez\",\"Tomislav Sokol\",\"Sylwia Spurek\",\"Raffaele Stancanelli\",\"Nicolae \\u015etef\\u0103nu\\u021b\\u0103\",\"Jessica Stegrud\",\"Tineke Strik\",\"Ramona Strugariu\",\"Beata Szyd\\u0142o\",\"Annalisa Tardino\",\"Vera Tax\",\"Cristian Terhe\\u015f\",\"Hermann Tertsch\",\"Barbara Thaler\",\"Irene Tinagli\",\"Tomas Tob\\u00e9\",\"Grzegorz Tobiszowski\",\"Ir\\u00e8ne Tolleret\",\"Eugen Tomac\",\"Edina T\\u00f3th\",\"Marie Toussaint\",\"Isabella Tovaglieri\",\"V\\u00e9ronique Trillet-Lenoir\",\"L\\u00e1szl\\u00f3 Tr\\u00f3cs\\u00e1nyi\",\"Drago\\u015f Tudorache\",\"Mihai Tudose\",\"Milan Uhr\\u00edk\",\"Nils U\\u0161akovs\",\"Tom Vandendriessche\",\"Kim Van Sparrentak\",\"Marie-Pierre Vedrenne\",\"Idoia Villanueva Ruiz\",\"Nikolaj Villumsen\",\"Lor\\u00e1nt Vincze\",\"Petar Vitanov\",\"Viola Von Cramon-Taubadel\",\"Bettina Vollath\",\"Alexandr Vondra\",\"Lucia Vuolo\",\"Veronika Vrecionov\\u00e1\",\"Maria Walsh\",\"Mick Wallace\",\"Marion Walsmann\",\"J\\u00f6rgen Warborn\",\"Witold Jan Waszczykowski\",\"Charlie Weimers\",\"Pernille Weiss\",\"Sarah Wiener\",\"Michal Wiezik\",\"Angelika Winzig\",\"Isabel Wiseler-Lima\",\"Salima Yenbou\",\"Elena Yoncheva\",\"St\\u00e9phanie Yon-Courtin\",\"Chrysoula Zacharopoulou\",\"Anna Zalewska\",\"Stefania Zambelli\",\"Javier Zarzalejos\",\"Bernhard Zimniok\",\"Juan Ignacio Zoido \\u00c1lvarez\",\"Robert Haj\\u0161el\",\"Ond\\u0159ej Kova\\u0159\\u00edk\",\"Lara Wolters\",\"Emmanouil Fragkos\",\"Marianne Vind\",\"Isabel Carvalhais\",\"Sun\\u010dana Glavak\",\"Gheorghe-Vlad Nistor\",\"Marc Angel\",\"Antoni Com\\u00edn I Oliveres\",\"Carles Puigdemont I Casamaj\\u00f3\",\"Christian Sagartz\",\"Barry Andrews\",\"Alviina Alamets\\u00e4\",\"Ilana Cicurel\",\"Margarita De La Pisa Carri\\u00f3n\",\"Salvatore De Meo\",\"Claude Gruffat\",\"Sandro Gozi\",\"Miriam Lexmann\",\"Jean-Lin Lacapelle\",\"Romana Jerkovi\\u0107\",\"Nora Mebarek\",\"Clara Ponsat\\u00ed Obiols\",\"Marcos Ros Sempere\",\"Vincenzo Sofo\",\"Linea S\\u00f8gaard-Lidell\",\"Dominik Tarczy\\u0144ski\",\"Riho Terras\",\"Adri\\u00e1n V\\u00e1zquez L\\u00e1zara\",\"Bart Groothuis\",\"Dorien Rookmaker\",\"Chris Macmanus\",\"Manuela Ripa\"]},\"selected\":{\"id\":\"1045\"},\"selection_policy\":{\"id\":\"1046\"}},\"id\":\"1032\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1008\",\"type\":\"LinearScale\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"field\":\"group\",\"transform\":{\"id\":\"1002\"}},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"field\":\"group\",\"transform\":{\"id\":\"1002\"}},\"size\":{\"units\":\"screen\",\"value\":5},\"x\":{\"field\":\"MCA0\"},\"y\":{\"field\":\"MCA1\"}},\"id\":\"1035\",\"type\":\"Scatter\"},{\"attributes\":{\"data_source\":{\"id\":\"1032\"},\"glyph\":{\"id\":\"1034\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1035\"},\"selection_glyph\":null,\"view\":{\"id\":\"1037\"}},\"id\":\"1036\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1040\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"top_units\":\"screen\"},\"id\":\"1025\",\"type\":\"BoxAnnotation\"},{\"attributes\":{},\"id\":\"1023\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"1021\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"1022\",\"type\":\"ResetTool\"}],\"root_ids\":[\"1003\"]},\"title\":\"Bokeh Application\",\"version\":\"2.2.3\"}};\n",
       "  var render_items = [{\"docid\":\"0e09381f-0cd5-4b66-8395-f78f4e29ea8b\",\"root_ids\":[\"1003\"],\"roots\":{\"1003\":\"65f67833-4408-4011-bfe3-a7ee115fdb48\"}}];\n",
       "  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n",
       "\n",
       "  }\n",
       "  if (root.Bokeh !== undefined) {\n",
       "    embed_document(root);\n",
       "  } else {\n",
       "    var attempts = 0;\n",
       "    var timer = setInterval(function(root) {\n",
       "      if (root.Bokeh !== undefined) {\n",
       "        clearInterval(timer);\n",
       "        embed_document(root);\n",
       "      } else {\n",
       "        attempts++;\n",
       "        if (attempts > 100) {\n",
       "          clearInterval(timer);\n",
       "          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n",
       "        }\n",
       "      }\n",
       "    }, 10, root)\n",
       "  }\n",
       "})(window);"
      ],
      "application/vnd.bokehjs_exec.v0+json": ""
     },
     "metadata": {
      "application/vnd.bokehjs_exec.v0+json": {
       "id": "1003"
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create figure\n",
    "p = bpl.figure(\n",
    "    tools='hover,pan,reset,wheel_zoom,box_zoom',\n",
    "    tooltips=[(col, f'@{col}') for col in hover_data],\n",
    "    background_fill_color='black',\n",
    ")\n",
    "\n",
    "p.scatter(\n",
    "    x='MCA0',\n",
    "    y='MCA1',\n",
    "    color={'field': 'group', 'transform': color_map},\n",
    "    legend_field='group',\n",
    "    size=5,\n",
    "    source=df_data,\n",
    ")\n",
    "\n",
    "p.grid.visible = False\n",
    "p.axis.visible = False\n",
    "\n",
    "bpl.show(p)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
